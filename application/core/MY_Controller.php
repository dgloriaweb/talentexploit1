<?php
defined('BASEPATH') or exit('No direct script access allowed');

class MY_Controller extends CI_Controller
{
    public  $maintitle;
    public function __construct()
    {
        parent::__construct();
        $this->maintitle = 'TalentExploit';
    }

    /**
     * Populate the dashboard page and jobs page with the properties data
     *
     * @return void
     */
    public function get_persons_properties($main_join_table)
    {
        //go through the query and build report
        $properties_array = [];

        //drivers licenses
        $properties = $this->person_model->get_person_properties($this->person_id, 'drivers_license', 'drivers', $main_join_table . '.prop_link_id = drivers.driving_id', $main_join_table, 'persons.person_id = ' . $main_join_table . '.person_id', $main_join_table . '.prop_link_type');
        if ($properties) {

            foreach ($properties as $property) {
                $properties_array['drivers_license'][] = [
                    'driving_id' => $property->driving_id,
                    'drivers_license' => $property->drivers_license,
                    'driving_years' => $property->driving_years,
                ];
            }
        }
        //skills
        $properties = $this->person_model->get_person_properties($this->person_id, 'skill', 'skills', $main_join_table . '.prop_link_id  = skills.skill_id', $main_join_table, 'persons.person_id = ' . $main_join_table . '.person_id', $main_join_table . '.prop_link_type');
        if ($properties) {
            foreach ($properties as $property) {
                $properties_array['skill'][] = [
                    'skill_id' => $property->skill_id,
                    'skill_name' => $property->skill,
                    'skill_type' => $property->skill_type,
                ];
            }
        }

        //language
        $properties = $this->person_model->get_person_languages($main_join_table, $this->person_id);
        if ($properties) {
            foreach ($properties as $property) {
                $properties_array['language'][] = ['language_id' => $property->language_id, 'language_name' => $property->language, 'langlevel_code' => $property->language_level];
            }
        }

        //sectors
        $properties = $this->person_model->get_person_properties($this->person_id, 'sector', 'sectors', $main_join_table . '.prop_link_id  = sectors.sector_id', $main_join_table, 'persons.person_id = ' . $main_join_table . '.person_id', $main_join_table . '.prop_link_type');
        if ($properties) {
            foreach ($properties as $property) {
                $properties_array['sector'][] = ['sector_id' => $property->sector_id, 'sector' => $property->sector, 'sector_years' => $property->sector_years];
            }
        }

        //citizenships
        $properties = $this->person_model->get_person_properties($this->person_id, 'citizenship', 'citizenships', $main_join_table . '.prop_link_id  = citizenships.citizen_id', $main_join_table, 'persons.person_id = ' . $main_join_table . '.person_id', $main_join_table . '.prop_link_type');
        if ($properties) {
            foreach ($properties as $property) {
                $properties_array['citizenship'][] = ['citizenship' => $property->citizenship];
            }
        }

        return $properties_array;
    }

    public function get_jobs_with_match_rate($properties, $work_details)
    {
        $jobs = $this->admin_jobs_model->get_jobs();

        foreach ($jobs as $key => $job) {

            //pass full job array to work with in the methods

            //skills
            $skill_match =  $this->calculate_skill_match($job, $properties);
            $user_skills_count = $skill_match['matching_skills_count'];
            $job_skills_count = $skill_match['job_skills_count'];
            $matching_skills_array = $skill_match['matching_skills_array'];
            $mismatching_skills_array = $skill_match['mismatching_skills_array'];

            //drivers licenses
            $license_match = $this->calculate_drivers_license_match($job, $properties);
            $user_licenses_count = $license_match['matching_licenses_count'];
            $job_icenses_count = $license_match['job_licenses_count'];
            $matching_licenses_array = $license_match['matching_licenses_array'];
            $mismatching_licenses_array = $license_match['mismatching_licenses_array'];

            //work hours
            $work_details_match = $this->calculate_work_details_match($job, $work_details);
            $user_work_prefs_count = $work_details_match['matching_work_details_count'];
            $job_work_prefs_count = $work_details_match['job_work_details_count'];

            //get accumulated values for rate calculation
            $total_user_data = $user_skills_count + $user_licenses_count + $user_work_prefs_count;
            $total_job_data = $job_skills_count + $job_icenses_count + $job_work_prefs_count;

            if ($total_job_data) {
                $job_rate = round(($total_user_data * 100) / $total_job_data);
            } else {
                $job_rate = 0;
            }
            $jobs[$key]['job_rate'] = $job_rate;
            $jobs[$key]['matching_licenses_array'] = $matching_licenses_array;
            $jobs[$key]['mismatching_licenses_array'] = $mismatching_licenses_array;
            $jobs[$key]['matching_skills_array'] = $matching_skills_array;
            $jobs[$key]['mismatching_skills_array'] = $mismatching_skills_array;
        }
        //sort the array from largest rate to smallest rate
        $job_rate = array_column($jobs, 'job_rate');
        $job_name = array_column($jobs, 'job_name');

        // Sort the data with volume descending, edition ascending
        // Add $data as the last parameter, to sort by the common key
        array_multisort($job_rate, SORT_DESC, $job_name, SORT_ASC, $jobs);

        return $jobs;
    }
    
    public function calculate_work_details_match($job, $work_details)
    {
        // get match rate for hours 
       $match_hours = $this->match_hours($job,$work_details);
       //add received values up
       $return_array['job_work_details_count'] = $match_hours['hours_match_base'];
       $return_array['matching_work_details_count'] =  $match_hours['hours_match_value'];

    }

    public function match_hours($job,$work_details)
    {
         // step 1: understand each selection case that can occur for both jobs and users
        //these are the x and y columns of the table

        $cases = [
            // normal_hours
            'sh1' => '10000',
            // normal + nightshift
            'sh2' => '11000',
            // normal + other_shift
            'sh3' => '10010',
            // normal + ns + os
            'sh4' => '11010',
            // nightshift_only
            'sh5' => '01100',
            // other_shift_only
            'sh6' => '00011',
            // nightshift + other_shift
            'sh7' => '01010',
        ];
        
        //build 
        $hu1 = $work_details['normal_hours'];
        $hu2 = $work_details['nightshift'];
        $hu3 = $work_details['nightshift_only'];
        $hu4 = $work_details['other_shift'];
        $hu5 = $work_details['other_shift_only'];

        // build above setup from current database values
        $user_selection = $hu1 . $hu2 . $hu3 . $hu4 . $hu5;
        // find the matching setup from above
        $user_selection_code = '';
        foreach ($cases as $key => $value) {
            if ($value == $user_selection) {
                $user_selection_code = $key;
            }
        }

        $hj1 = $job['normal_hours'];
        $hj2 = $job['nightshift'];
        $hj3 = $job['nightshift_only'];
        $hj4 = $job['other_shift'];
        $hj5 = $job['other_shift_only'];

        // build above setup from current database values
        $job_selection = $hj1 . $hj2 . $hj3 . $hj4 . $hj5;
        // find the matching setup from above
        $job_selection_code = '';
        foreach ($cases as $key => $value) {
            if ($value == $job_selection) {
                $job_selection_code = $key;
            }
        }
        //compare the result and get result from table
        $match_rate = $this->global_model->get_match_hours($user_selection_code,$job_selection_code)[$job_selection_code];
        $return_array['hours_match_base'] = 4;
        $return_array['hours_match_value'] = $match_rate;

        return $return_array;
    }

    public function calculate_drivers_license_match($job, $properties)
    {
        $job_id = $job['job_id'];
        $job_licenses_array = [];
        $job_licenses_array = $this->admin_jobs_model->get_jobs_drivers_licenses($job_id);

        $return_array['job_licenses'] = $job_licenses_array;
        $return_array['job_licenses_count'] = count($job_licenses_array);
        //if the job has none selected, no need to calculate anything

        if ($job_licenses_array[0]['driving_id'] == 1) {

            $matching_licenses_array[]  = $job_licenses_array[0];
            $mismatching_licenses_array = [];
        } else {
            if (!isset($properties['drivers_license'])) {
                $matching_licenses_array = [];
            } else {
                $matching_licenses_array = array_uintersect($job_licenses_array, $properties['drivers_license'], function ($val1, $val2) {
                    return strcmp($val1['driving_id'], $val2['driving_id']);
                });
                $value = [];
                $driving_id_from_unset_matching_array = [];
                //get all match results, and compare years with users 
                foreach ($matching_licenses_array as $key => $job_license) {
                    //get corresponding year data from user licenses
                    foreach ($properties['drivers_license'] as $key2 => $user_license) {
                        if ($user_license['driving_id'] === $job_license['driving_id']) {
                            //check if the job years are smaller than the users
                            if ($job_license['years'] > $user_license['driving_years']) {
                                $driving_id_from_unset_matching_array = [
                                    'driving_id' => $job_license['driving_id']
                                ];
                                unset($matching_licenses_array[$key]);
                            }
                        }
                    }
                }
            }

            $mismatching_licenses_array = array_udiff($job_licenses_array, $matching_licenses_array, function ($a, $b) {
                return ($a['driving_id'] - $b['driving_id']);
            });
        }

        $return_array['job_licenses'] = $job_licenses_array;
        $return_array['job_licenses_count'] = count($job_licenses_array);
        $return_array['matching_licenses_array'] = $matching_licenses_array;
        $return_array['matching_licenses_count'] = count($matching_licenses_array);
        $return_array['mismatching_licenses_array'] = $mismatching_licenses_array;

        return $return_array;
    }
    public function calculate_skill_match($job, $properties)
    {
        //set defaults
        $job_id = $job['job_id'];
        //calculate job rate and append to jobs array
        //skill return
        $job_skills_array = $this->admin_jobs_model->get_job_requirements($job_id);

        //if there is no skill set up, then return empty array
        if (!isset($properties['skill'])) {
            $matching_skills_array = [];
        } else {
            $matching_skills_array = array_uintersect($job_skills_array, $properties['skill'], function ($val1, $val2) {
                return strcmp($val1['skill_id'], $val2['skill_id']);
            });
        }
        //mismatch return
        // $mismatching_skills_array = array_udiff($job_skills_array, $properties['skill'], function ($a, $b) {
        //     return ($a['skill_id'] - $b['skill_id']);
        // });

        $mismatching_skills_array = array_udiff($job_skills_array, $matching_skills_array, function ($a, $b) {
            return ($a['skill_id'] - $b['skill_id']);
        });


        $return_array['job_skills'] = $job_skills_array;
        $return_array['job_skills_count'] = count($job_skills_array);
        $return_array['matching_skills_array'] = $matching_skills_array;
        $return_array['matching_skills_count'] = count($matching_skills_array);
        $return_array['mismatching_skills_array'] = $mismatching_skills_array;

        return $return_array;
    }

    /**
     * update changes
     *
     * @return void
     */
    public function update_work_hour_preferences($id = NULL)
    {
        // entry points are: admin_jobs/update_work_hour_preferences($job_id) and persons/update_work_hour_preferences($person_id)
        //model for both
        if ($this->uri->segment(1, 0) == 'admin_jobs') {
            $this->model = $this->admin_jobs_model;
            $redirect_method = 'admin_jobs/edit_job/' . $id;
        } else {
            $this->model = $this->person_model;
            $redirect_method = 'persons/';
        }
        $data['title'] = 'Update work hour preferences';
        $querydata = [];
        foreach ($this->input->post() as $key => $value) {
            if ($value == 'on') {
                $querydata[$key] =  1;
            }
        }
        if (!$this->model->update_work_hour_preferences($id, $querydata)) {
            $this->session->set_flashdata('work_hour_settings_not_updated', 'Work hour settings NOT updated');
        } else {
            $this->session->set_flashdata('work_hour_settings_updated', 'Work hour settings successfully updated');
        }

        redirect($redirect_method);
    }

    public function send_email($action, $contact_details = NULL)
    {
        //send email
        $contact_details = 'new user registered';
        $this->email->from('contact@talentexploit.com', 'Admin - autoemail');
        $this->email->to('dgloria.work@gmail.com');

        $this->email->subject('Message sent from talentexploit');
        $this->email->message("New action happened on talentexploit. \n Action: " . $action . " \n by: " . $contact_details . ", \n login here: https://talentexploit.com/");

        if (!$this->email->send()) {
        } else {
            $this->session->set_flashdata('contact_sent', 'Contact message has been sent');
        }
    }
}
