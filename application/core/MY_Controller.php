<?php
defined('BASEPATH') or exit('No direct script access allowed');

class MY_Controller extends CI_Controller
{
    public function __construct()
    {
        parent::__construct();
    }

    /**
     * Populate the dashboard page and jobs page with the properties data
     *
     * @return void
     */
    public function get_persons_properties($main_join_table)
    {
        //go through the query and build report
        $properties_array = [];

        //drivers licenses
        $properties = $this->person_model->get_person_properties($this->person_id, 'drivers_license', 'drivers', $main_join_table . '.prop_link_id = drivers.driving_id', $main_join_table, 'persons.person_id = ' . $main_join_table . '.person_id', $main_join_table . '.prop_link_type');
        if ($properties) {

            foreach ($properties as $property) {
                $properties_array['drivers_license'][] = [
                    'driving_id' => $property->driving_id,
                    'drivers_license' => $property->drivers_license,
                    'driving_years' => $property->driving_years,
                ];
            }
        }
        //skills
        $properties = $this->person_model->get_person_properties($this->person_id, 'skill', 'skills', $main_join_table . '.prop_link_id  = skills.skill_id', $main_join_table, 'persons.person_id = ' . $main_join_table . '.person_id', $main_join_table . '.prop_link_type');
        if ($properties) {
            foreach ($properties as $property) {
                $properties_array['skill'][] = [
                    'skill_id' => $property->skill_id,
                    'skill_name' => $property->skill,
                    'skill_type' => $property->skill_type,
                ];
            }
        }

        //language
        $properties = $this->person_model->get_person_languages($main_join_table, $this->person_id);
        if ($properties) {
            foreach ($properties as $property) {
                $properties_array['language'][] = ['language_id' => $property->language_id, 'language_name' => $property->language, 'langlevel_code' => $property->language_level];
            }
        }

        //sectors
        $properties = $this->person_model->get_person_properties($this->person_id, 'sector', 'sectors', $main_join_table . '.prop_link_id  = sectors.sector_id', $main_join_table, 'persons.person_id = ' . $main_join_table . '.person_id', $main_join_table . '.prop_link_type');
        if ($properties) {
            foreach ($properties as $property) {
                $properties_array['sector'][] = ['sector_id' => $property->sector_id, 'sector' => $property->sector, 'sector_years' => $property->sector_years];
            }
        }

        //citizenships
        $properties = $this->person_model->get_person_properties($this->person_id, 'citizenship', 'citizenships', $main_join_table . '.prop_link_id  = citizenships.citizen_id', $main_join_table, 'persons.person_id = ' . $main_join_table . '.person_id', $main_join_table . '.prop_link_type');
        if ($properties) {
            foreach ($properties as $property) {
                $properties_array['citizenship'][] = ['citizenship' => $property->citizenship];
            }
        }

        return $properties_array;
    }

    public function get_jobs($properties, $work_details)
    {
        $jobs = $this->admin_jobs_model->get_jobs();

        foreach ($jobs as $key => $job) {

            //pass full job array to work with in the methods

            //skills
            //mock
            $user_skills_count = $this->calculate_skill_match($job, $properties)['matching_skills_count'];
            $job_skills_count = $this->calculate_skill_match($job, $properties)['job_skills_count'];
            //drivers licenses
            //mock
            $user_licenses_count = 1;
            $job_icenses_count = 2;
            //work hours
            //mock
            $user_work_hours_count = 4;
            $job_work_hours_count = 8;

            //get accumulated values for rate calculation
            $total_user_data = $user_skills_count + $user_licenses_count + $user_work_hours_count;
            $total_job_data = $job_skills_count + $job_icenses_count + $job_work_hours_count;

            if ($total_job_data) {
                $job_rate = ($total_user_data * 100) / $total_job_data;
            } else {
                $job_rate = 0;
            }
            $jobs[$key]['job_rate'] = $job_rate;
        }

        return $jobs;
    }
    public function calculate_skill_match($job, $properties)
    {
        //set defaults
        $job_id = $job['job_id'];
        //calculate job rate and append to jobs array

        //new code
        //skill return
        $job_skills_array = $this->admin_jobs_model->get_job_requirements($job_id);

        $job_skills_count = count($job_skills_array);

        $matching_skills_array = array_uintersect($job_skills_array, $properties['skill'],function ($val1, $val2){
            return strcmp($val1['skill_id'], $val2['skill_id']);
            });
        

        //mock
        $mismatching_skills_array = [
            'skill_id' => 2,
            'skill' => 'def',
        ];
        $matching_skills_count = count($matching_skills_array);

        $skill_array['jobs'] = $job_skills_array;
        $skill_array['job_skills_count'] = $job_skills_count;
        $skill_array['matching_skills_array'] = $matching_skills_array;
        $skill_array['mismatching_skills_array'] = $mismatching_skills_array;
        $skill_array['matching_skills_count'] = $matching_skills_count;

        // $data['desires'] = $this->get_persons_properties('desired_job_links');
        if (isset($properties['skill'])) {
            $prop_skills = array_column($properties['skill'], 'skill_id');

        } else {
            $prop_skills[] = 0;
        }
        $job_skills = array_column($job_skills_array, 'skill_id');
        //compare two arrays, see how many skills are required for this job and what rate user has

        return $skill_array;
    }


}
