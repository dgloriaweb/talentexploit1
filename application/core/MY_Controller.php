<?php
defined('BASEPATH') or exit('No direct script access allowed');

class MY_Controller extends CI_Controller
{
    function __construct()
    {
        parent::__construct();
    }
    public function get_persons_properties($main_join_table)
    {
        //go through the query and build report
        $properties_array = [];

        //drivers licenses
        $properties = $this->person_model->get_person_properties($this->person_id, 'drivers_license', 'drivers', $main_join_table . '.prop_link_id = drivers.driving_id', $main_join_table, 'persons.person_id = ' . $main_join_table . '.person_id', $main_join_table . '.prop_link_type');
        if ($properties) {

            foreach ($properties as $property) {
                $properties_array['drivers_license'][] = [
                    'driving_id' => $property->driving_id,
                    'drivers_license' => $property->drivers_license,
                    'driving_years' => $property->driving_years,
                ];
            }
        }
        //skills
        $properties = $this->person_model->get_person_properties($this->person_id, 'skill', 'skills', $main_join_table . '.prop_link_id  = skills.skill_id', $main_join_table, 'persons.person_id = ' . $main_join_table . '.person_id', $main_join_table . '.prop_link_type');
        if ($properties) {
            foreach ($properties as $property) {
                $properties_array['skill'][] = [
                    'skill_name' => $property->skill,
                    'skill_id' => $property->skill_id,
                ];
            }
        }

        //language
        $properties = $this->person_model->get_person_languages($main_join_table, $this->person_id);
        if ($properties) {
            foreach ($properties as $property) {
                $properties_array['language'][] = ['language_name' => $property->language, 'langlevel_code' => $property->language_level];
            }
        }

        //sectors
        $properties = $this->person_model->get_person_properties($this->person_id, 'sector', 'sectors', $main_join_table . '.prop_link_id  = sectors.sector_id', $main_join_table, 'persons.person_id = ' . $main_join_table . '.person_id', $main_join_table . '.prop_link_type');
        if ($properties) {
            foreach ($properties as $property) {
                $properties_array['sector'][] = ['sector' => $property->sector, 'sector_years' => $property->sector_years];
            }
        }

        //citizenships
        $properties = $this->person_model->get_person_properties($this->person_id, 'citizenship', 'citizenships', $main_join_table . '.prop_link_id  = citizenships.citizen_id', $main_join_table, 'persons.person_id = ' . $main_join_table . '.person_id', $main_join_table . '.prop_link_type');
        if ($properties) {
            foreach ($properties as $property) {
                $properties_array['citizenship'][] = ['citizenship' => $property->citizenship];
            }
        }

        return $properties_array;
    }
    public function calculate_drivers_license_match($job_id)
    {
        $data['properties'] = $this->get_persons_properties('properties');
        if(isset($data['properties']['drivers_license'])){
        $prop_array = array_column($data['properties']['drivers_license'], 'driving_id');
        } else {
            $prop_array[] = 0;
        }
        //job_drivers_license->drivers_license
        $data['job_licenses'] = $this->admin_jobs_model->get_jobs_drivers_licenses($job_id);
        $job_array = array_column($data['job_licenses'], 'driving_id');
        //compare licenses, return match rate
        $job_array_count = count($job_array);
        $matching_driving_id = array_intersect($job_array, $prop_array);
        
        return $matching_driving_id;
    }

    public function calculate_skill_match($job_id)
    {
        //foreach loop for jobs, now test with one job id
        $data['properties'] = $this->get_persons_properties('properties');
        $data['desires'] = $this->get_persons_properties('desired_job_links');
        if (isset($data['properties']['skill'])) {
            $prop_skills = array_column($data['properties']['skill'], 'skill_id');
            
        } else {
            $prop_skills[] = 0;
        }
        if (isset($data['desires']['skill'])) {
        $des_skills = array_column($data['desires']['skill'], 'skill_id');
        } else {
            $des_skills[] = 0;
        }
        $all_skills = array_unique(array_merge($prop_skills, $des_skills), SORT_REGULAR);
        $job_requirements = $this->admin_jobs_model->get_job_requirements($job_id);
        $job_skills = array_column($job_requirements, 'skill_id');
        //compare two arrays, see how many skills are required for this job and what rate user has
        $total_job_skills_count = count($job_skills);
        //with desired skills
        $skills_match = array_intersect($job_skills, $all_skills);
        //with existing skills
        $skills_match = array_intersect($job_skills, $prop_skills);
        
        return $skills_match;
    }

}