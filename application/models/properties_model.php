<?php

class Properties_model extends CI_Model
{
    public function register($new_person_id)
    {
        //user data array
        $data = [
            'person_id' => $new_person_id,
        ];
        return $this->db->insert('person_links', $data);
    }
    
    public function add($main_join_table,$new_property)
    {
        //avoid error - set driving_years to null if none is submitted
        if(!isset($new_property['driving_years']) || $new_property['driving_years']== '') {
            $new_property['driving_years'] = 0;
        }

        //avoid error - set driving_years to null if none is submitted
        if(!isset($new_property['sector_years']) || $new_property['sector_years']== '') {
            $new_property['sector_years'] = 0;
        }

        //avoid error - set driving_years to null if none is submitted
        if(!isset($new_property['langlevel_id']) || $new_property['langlevel_id']== '') {
            $new_property['langlevel_id'] = 0;
        }

        //check if exists
        //SELECT * FROM `properties` WHERE `person_id` = 3 AND `prop_link_id` = 2 AND `prop_link_type` = 'drivers_license'
        $data = [
            'person_id' => $new_property['person_id'],
            'prop_link_id' => $new_property['prop_link_id'],
            'prop_link_type' => $new_property['prop_link_type']
        ];
        if ($this->get_links($main_join_table,$data)) {
            //data is a duplicate
            return false;
        }

        //INSERT INTO `properties` (`person_id`, `prop_link_id`, `prop_link_type`, `driving_years`) VALUES ('3', '2', 'drivers_license', '20');
        $data = [
            'person_id' => $new_property['person_id'],
            'prop_link_id' => $new_property['prop_link_id'],
            'prop_link_type' => $new_property['prop_link_type'],
            'driving_years' => $new_property['driving_years'],
            'langlevel_id' => $new_property['langlevel_id'],
            'sector_years' => $new_property['sector_years']
        ];

        if ($this->db->insert($main_join_table, $data)) {
            return true;
        } else {
            return false;
        }
    }

    public function delete_link_by_id($main_join_table,$link_id)
    {
        $this->db->where('prop_id', $link_id);
        if (!$this->db->delete($main_join_table)) {
            return false;
        } else {
            return true;
        }
    }

    /**
     * takes person_id, prop_link_id and prop_link_type from controller to return the row
     *
     * @param array $data
     * @return void
     */
    public function get_links($main_join_table,$data)
    {
        //SELECT * FROM `properties` WHERE `person_id` = ? AND `prop_link_id` = ? AND `prop_link_type` = ?
        $this->db->where($data);
        $query = $this->db->get($main_join_table);
        return $query->result();
    }

    /**
     * updates the sector_years in properties by it's prop_id
     *
     * @param int $prop_id
     * @param int $years
     * @return void
     */
    public function update_sector_years($main_join_table,$prop_id, $years)
    {
        $this->db->set('sector_years', $years);
        $this->db->where('prop_id', $prop_id);
        $this->db->update($main_join_table);
        return true;
        
    }

    /**
     * returns the row by it's prop_id
     *
     * @param int $prop_id
     * @return void
     */
    public function get_link_by_prop_id($main_join_table,$prop_id)
    {
        $this->db->where('prop_id', $prop_id);
        $query = $this->db->get($main_join_table);
        return $query->result();
        
    }

    public function exclude_items($exclude_array,$id,$table)
    {
        if($exclude_array) {
            $this->db->where_not_in($id,$exclude_array);
        }
        if ($table == 'skills') {
            $this->db->order_by('skill');
        }
        $query = $this->db->get($table);
        return $query->result();

    }
}
