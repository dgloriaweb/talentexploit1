<?php

class Admin_skills_model extends CI_Model
{

    public function get_skills()
    {
        $this->db->select('skills.skill_id, skills.skill,skills_core_skills_link.core_skill_id,core_skills.core_skill');
        $this->db->join('skills_core_skills_link', 'skills.skill_id = skills_core_skills_link.skill_id');
        $this->db->join('core_skills', 'skills_core_skills_link.core_skill_id = core_skills.core_skill_id');
        $this->db->order_by('skills.skill');
        $query = $this->db->get('skills');
        return $query->result();

    }

    public function get_core_skills()
    {
        $this->db->select('core_skills.core_skill_id,core_skills.core_skill');
        $this->db->order_by('core_skills.core_skill');
        $query = $this->db->get('core_skills');
        return $query->result();

    }

    public function get_core_skills_for_skill($skill_id)
    {
        //SELECT * FROM `skills_core_skills_link` where `skill_id` = 155
        $this->db->where('skill_id', $skill_id);
        return $this->db->get('skills_core_skills_link')->result();
    }

    public function exclude_existing_core_skills($skill_id)
    {
        $result = $this->get_core_skills_for_skill($skill_id);
        $existing_id_array =[];
        foreach ($result as $item) {
            $existing_id_array[] = $item->core_skill_id;
        }
        //then select which is not these id's
        $this->db->select('core_skills.core_skill_id,core_skills.core_skill');
        $this->db->where_not_in('core_skills.core_skill_id',$existing_id_array);
        $this->db->order_by('core_skills.core_skill');
        $query = $this->db->get('core_skills');
        return $query->result();        
    }

    public function get_skill_by_id($skill_id)
    {
        $this->db->select('*');
        $this->db->join('skills_core_skills_link', 'skills.skill_id = skills_core_skills_link.skill_id');
        $this->db->join('core_skills', 'skills_core_skills_link.core_skill_id = core_skills.core_skill_id');
        $this->db->where('skills.skill_id', $skill_id);
        $query = $this->db->get('skills');
        return $query->result();
    }

    public function update_skill($skill_id, $newskill)
    {
        //make sure no duplicates are created
        $this->db->select('*');
        $this->db->from('skills');
        $this->db->where('skill', $newskill);
        $query = $this->db->get();
        if (!$query->result()) {
            $this->db->set('skill', $newskill);
            $this->db->where('skill_id', $skill_id);
            $this->db->update('skills');
            return true;
        } else {
            //message: skill already exists in table
            return false;
        }
    }

    public function remove_core_skill_link($skill_id, $core_skill_id)
    {
        //DELETE FROM `skills_core_skills_link` WHERE `skill_id` = 155 AND `core_skill_id` = 6
        $this->db->where('skill_id', $skill_id);
        $this->db->where('core_skill_id', $core_skill_id);
        if (!$this->db->delete('skills_core_skills_link')) {
            return false;
        } else {
            return true;
        }
    }

    public function add_core_skill_link($skill_id, $selected_core_skill)
    {
        //check if exists
        $skills = $this->get_skill_by_id($skill_id);
        foreach ($skills as $skill){
            if ($skill->core_skill_id == $selected_core_skill) {
                return false;
            }
        }

        $data = [
            'skill_id' => $skill_id,
            'core_skill_id' => $selected_core_skill
        ];
        if($this->db->insert('skills_core_skills_link', $data)){
            return true;
        } else {
            return false;
        }

    }
}
