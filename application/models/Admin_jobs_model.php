<?php

class Admin_jobs_model extends CI_Model
{
    public function get_jobs($job_id = null)
    {
        if($job_id) {
            $this_job = $this->get_job_by_id($job_id);
            $similar_jobs = explode(',', $this_job[0]->similar_jobs);
            //exclude the self
            $this->db->where('job_id !=',$job_id);
            //exclude similar jobs
            foreach($similar_jobs as $job)
            {
                $this->db->where('job_id !=', $job);
            }
        }
        $this->db->order_by('job_name');
        $query = $this->db->get('jobs');
        return $query->result();
    }

    public function get_job_by_id($job_id)
    {
        $this->db->where('jobs.job_id', $job_id);
        $query = $this->db->get('jobs');
        return $query->result();
    }

    public function update_job_preferences($job_id, $querydata)
    {
        $this->db->set('remote', $querydata['remote']);
        $this->db->set('overtime', $querydata['overtime']);
        $this->db->set('nightshift', $querydata['nightshift']);
        $this->db->set('other_shift', $querydata['other_shift']);
        $this->db->set('weekdays', $querydata['weekdays']);
        $this->db->set('saturday', $querydata['saturday']);
        $this->db->set('sunday', $querydata['sunday']);
        $this->db->set('bank_holidays', $querydata['bank_holidays']);
        $this->db->where('jobs.job_id', $job_id);
        if ($this->db->update('jobs')) {
            return true;
        } else {
            return false;
        }

    }

    public function get_job_similar_jobs($job_id)
    {
        $this_job = $this->get_job_by_id($job_id);
        $similar_jobs = explode(',', $this_job[0]->similar_jobs);
        $this->db->where_in('jobs.job_id', $similar_jobs);
        $query = $this->db->get('jobs');
        return $query->result();
    }

    public function add_keyword($job_id, $keyword_add)
    {
        //if keyword doesn't exist in the array, then add
        $job_data = $this->get_job_by_id($job_id);
        $keyword_array = explode(',', $job_data[0]->keywords);
        $new_keywords = trim($job_data[0]->keywords);
        if (!in_array($keyword_add, $keyword_array, false)) {
            //if you already have a comma, skip it
            if (substr($new_keywords, -1) != ',') {
                $new_keywords .= ',';
            }
            $new_keywords .= $keyword_add;
            $this->db->set('keywords', $new_keywords);
            $this->db->where('jobs.job_id', $job_id);
            if ($this->db->update('jobs')) {
                return true;
            } else {
                return false;
            }
        } else {
            return false;
        }
    }
    public function update_similar_jobs($job_id, $selected_job)
    {
        //check if the id exists in the list
        $job = $this->get_job_by_id($job_id);
        if (!$this->get_job_by_id($selected_job)) {
            return false;
        } else {
            //check if this number already exist in the list
            $similar_jobs = $job[0]->similar_jobs;
            if (!in_array($selected_job,explode(',',$similar_jobs))) 
            {
                if (substr($similar_jobs, -1) != ',') {
                    $similar_jobs .= ',';
                }
                $similar_jobs .= $selected_job;
                $this->db->set('similar_jobs', $similar_jobs);
                $this->db->where('jobs.job_id', $job_id);
                if ($this->db->update('jobs')) {

                    return true;
                } else {
                    return false;
                }
            }
        }
    }
    public function remove_similar_jobs($job_id, $similar_job_id)
    {
        //job id is the job where the change is made, similar job is in the similar_jobs field
        $job = $this->get_job_by_id($job_id);
        $similar_jobs = explode(',', $job[0]->similar_jobs);
        if (($key = array_search($similar_job_id, $similar_jobs)) !== false) {
            unset($similar_jobs[$key]);
        }
        $similar_jobs = implode(',', $similar_jobs);
        $this->db->set('similar_jobs', $similar_jobs);

        $this->db->where('jobs.job_id', $job_id);
        if ($this->db->update('jobs')) {

            return true;
        } else {
            return false;
        }
    }

    public function get_job_requirements($job_id)
    {
        $this->db->join('skills', 'job_requirements.skill_id=skills.skill_id');
        $this->db->where('job_id', $job_id);
        $query = $this->db->get('job_requirements');
        return $query->result();
    }
}
