<?php

class Admin_jobs_model extends CI_Model
{
    public function get_jobs($job_id = null)
    {
        if ($job_id) {
            $this_job = $this->get_job_by_id($job_id);
            $similar_jobs = explode(',', $this_job[0]['similar_jobs']);
            //exclude the self
            $this->db->where('job_id !=', $job_id);
            //exclude similar jobs
            foreach ($similar_jobs as $job) {
                $this->db->where('job_id !=', $job);
            }
        }
        $this->db->order_by('job_name');
        $query = $this->db->get('jobs');
        return $query->result('array');
    }

    public function get_job_by_id($job_id)
    {
        $this->db->where('jobs.job_id', $job_id);
        $query = $this->db->get('jobs');
        return $query->result('array');
    }

    public function update_job_preferences($job_id, $querydata)
    {
        $this->db->set('remote', $querydata['remote']);
        $this->db->set('overtime', $querydata['overtime']);
        $this->db->set('nightshift', $querydata['nightshift']);
        $this->db->set('other_shift', $querydata['other_shift']);
        $this->db->set('weekdays', $querydata['weekdays']);
        $this->db->set('saturday', $querydata['saturday']);
        $this->db->set('sunday', $querydata['sunday']);
        $this->db->set('bank_holidays', $querydata['bank_holidays']);
        $this->db->where('jobs.job_id', $job_id);
        if ($this->db->update('jobs')) {
            return true;
        } else {
            return false;
        }

    }

    public function get_job_similar_jobs($job_id)
    {
        $this_job = $this->get_job_by_id($job_id);
        $similar_jobs = explode(',', $this_job[0]['similar_jobs']);
        $this->db->where_in('jobs.job_id', $similar_jobs);
        $query = $this->db->get('jobs');
        return $query->result();
    }

    public function update_keyword($job_id, $keyword_add)
    {
        //if keyword doesn't exist in the array, then add
        $job_data = $this->get_job_by_id($job_id);
        $keyword_array = explode(',', $job_data[0]['keywords']);
        $new_keywords = trim($job_data[0]['keywords']);
        if (!in_array($keyword_add, $keyword_array, false)) {
            //if you have a trailing comma, remove it.
            $new_keywords = ltrim($new_keywords, ',');
            //if you already have a comma, skip it
            if (substr($new_keywords, -1) != ',') {
                $new_keywords .= ',';
            }
            $new_keywords .= $keyword_add;
            $this->db->set('keywords', $new_keywords);
            $this->db->where('jobs.job_id', $job_id);
            if ($this->db->update('jobs')) {
                return true;
            } else {
                return false;
            }
        } else {
            return false;
        }
    }
    public function update_similar_jobs($job_id, $selected_job)
    {
        //check if the id exists in the list
        $job = $this->get_job_by_id($job_id);
        if (!$this->get_job_by_id($selected_job)) {
            return false;
        } else {
            //check if this number already exist in the list
            $similar_jobs = $job[0]['similar_jobs'];
            if (!in_array($selected_job, explode(',', $similar_jobs))) {
            //if you have a trailing comma, remove it.
            $similar_jobs = ltrim($similar_jobs, ',');
            if (substr($similar_jobs, -1) != ',') {
                    $similar_jobs .= ',';
                }
                $similar_jobs .= $selected_job;
                $this->db->set('similar_jobs', $similar_jobs);
                $this->db->where('jobs.job_id', $job_id);
                if ($this->db->update('jobs')) {

                    return true;
                } else {
                    return false;
                }
            }
        }
    }
    public function remove_similar_job($job_id, $similar_job_id)
    {
        //job id is the job where the change is made, similar job is in the similar_jobs field
        $job = $this->get_job_by_id($job_id);
        $similar_jobs = explode(',', $job[0]['similar_jobs']);
        if (($key = array_search($similar_job_id, $similar_jobs)) !== false) {
            unset($similar_jobs[$key]);
        }
        $similar_jobs = implode(',', $similar_jobs);
        $this->db->set('similar_jobs', $similar_jobs);

        $this->db->where('jobs.job_id', $job_id);
        if ($this->db->update('jobs')) {

            return true;
        } else {
            return false;
        }
    }
    public function remove_skill($job_id, $skill_id)
    {
        //job id is the job where the change is made, skill is the joined job_requirements table

        $this->db->where('job_id', $job_id);
        $this->db->where('skill_id', $skill_id);
        if ($this->db->delete('job_requirements')) {

            return true;
        } else {
            return false;
        }
    }

    public function get_job_requirements($job_id)
    {
        $this->db->join('skills', 'job_requirements.skill_id=skills.skill_id');
        $this->db->where('job_id', $job_id);
        $this->db->order_by('skill');
        $query = $this->db->get('job_requirements');
        return $query->result('array');
    }

    public function exclude_items($exclude_array)
    {
        if ($exclude_array) {
            $this->db->where_not_in('skill_id', $exclude_array);
        }
        $this->db->order_by('skill');
        $query = $this->db->get('skills');
        return $query->result();
    }

    public function exclude_license_items($exclude_array)
    {
        if ($exclude_array) {
            $this->db->where_not_in('driving_id', $exclude_array);
        }
        $query = $this->db->get('drivers');
        return $query->result();
    }

    public function store_skill($job_id, $skill_id)
    {
        $data = [
            'job_id' => $job_id,
            'skill_id' => $skill_id,
        ];

        if ($this->db->insert('job_requirements', $data)) {
            return true;
        } else {
            return false;
        }

    }
    public function add_job($job)
    {
        //change first letter to uppercase

        $data = [
            'job_name' => ucfirst($job),
            'remote' => 0,
            'overtime' => 0,
            'nightshift' => 0,
            'other_shift' => 0,
            'weekdays' => 0,
            'saturday' => 0,
            'sunday' => 0,
            'bank_holidays' => 0
        ];

        if ($this->db->insert('jobs', $data)) {
            //set drivers license to default
            $insert_id = $this->db->insert_id();
            $this->add_license($insert_id, 1);

            return $insert_id;
        } else {
            return false;
        }

    }
    public function get_jobs_drivers_licenses($job_id, $driving_id = null)
    {
        $this->db->join('drivers', 'drivers.driving_id=job_drivers_licenses.driving_id');
        if ($driving_id) {
            $this->db->where('job_drivers_licenses.driving_id', $driving_id);
        }
        $this->db->where('job_id', $job_id);
        $query = $this->db->get('job_drivers_licenses');
        return $query->result('array');
    }

    public function remove_license($job_id, $driving_id = null)
    {
        $this->db->where('job_id', $job_id);
        if ($driving_id) {
            $this->db->where('driving_id', $driving_id);
        }
        if ($this->db->delete('job_drivers_licenses')) {
            return true;
        } else {
            return false;
        }

    }

    public function add_license($job_id, $driving_id,$driving_years =0)
    {
        //TODO add must, years and clean

        $querydata =
            [
            'job_id' => $job_id,
            'driving_id' => $driving_id,
            'years' => $driving_years
        ];
        if ($this->db->insert('job_drivers_licenses', $querydata)) {
            return true;
        } else {
            return false;
        }
    }

    /**
     * if no license is set on the job, default should be none
     *
     * @param [int] $job_id
     * @return void
     */
    public function set_default($job_id)
    {
        $querydata =
            [
            'job_id' => $job_id,
            'driving_id' => 1,   
            'years' => 0         
        ];
        $this->db->insert('job_drivers_licenses', $querydata);
    }
}
