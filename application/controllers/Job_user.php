<?php
defined('BASEPATH') or exit('No direct script access allowed');

class Job_user extends MY_Controller
{
    public $person_id;

    public function __construct()
    {
        parent::__construct();
        //Loading url helper
        $this->load->helper('url');
        if (!$this->session->userdata('logged_in') && $this->uri->segment(1, '') !== 'register' && $this->uri->segment(2, '') !== 'store_user') {
            redirect('login');
        }
        $this->person_id = $this->session->userdata('person_id');

    }

    public function index()
    {
        $data['title'] = 'Jobs for user';
        //get job
        $job_id = $this->uri->segment(3, 0);
        $data['job'] = $this->admin_jobs_model->get_job_by_id($job_id)[0];
        $properties = $this->get_persons_properties('properties');
        //get users work hours properties from persons table
        $data['user_work_hours'] = $this->person_model->get_persons_work_details($this->person_id)[0];
        //echo '<pre>'; var_dump($data['user_work_hours']); echo '</pre>'; die;
        // drivers licenses
        $data += $this->get_matching_licenses($job_id, $properties);

        $data += $this->get_matching_skills($job_id, $properties);



        //calculate rate of match from the job and the user properties
        $match_count = 0;
        $job_array_count = 0;
        //drivers licenses
        $match_count_licenses = count($data['intersect_licenses']);
        $job_array_count_licenses = count($data['job_licenses']);

        //skills
        $match_count_skills = count($data['intersect_skills']);
        $job_array_count_skills = count($data['job_skills']);

        //summarize numbers  for rate count
        $match_count = $match_count_licenses + $match_count_skills;
        $job_array_count = $job_array_count_licenses + $job_array_count_skills;
        $data['job_rate'] = round(($match_count * 100) / $job_array_count, 0);

        $this->load->view('job_user_view', $data);

    }

    /**
     * get drivers licenses for user job recommendation page, compare them and let user change their preferences
     *
     * @param [type] $job_id
     * @return void
     */
    public function get_matching_licenses($job_id, $properties)
    {
        //job data
        $job_licenses = $this->admin_jobs_model->get_jobs_drivers_licenses($job_id);
        $data['job_licenses'] = [];
        if ($job_licenses) {
            foreach ($job_licenses as $license) {
                $data['job_licenses'][] = [
                    'driving_id' => $license->driving_id,
                    'drivers_license' => $license->drivers_license,
                    'driving_years' => $license->years,
                ];

            }
        } else {
            //if not set, set defaulted to none and redirect to page
            $this->admin_jobs_model->set_default($job_id);
            redirect('job_user/index/' . $job_id);
        }

        //user data
        $data_user_licenses = [];
        if (isset($properties['drivers_license'])) {
            foreach ($properties['drivers_license'] as $license) {
                $driving_years = -1;
                //get drivers licenses
                $driving_id = $license['driving_id'];
                $job_license_of_user = $this->admin_jobs_model->get_jobs_drivers_licenses($job_id, $driving_id);
                if ($job_license_of_user) {
                    //compare drivers licenses years, and return the job year if greater or equal to.
                    $license['driving_years'] >= $job_license_of_user[0]->years ? $driving_years = $job_license_of_user[0]->years : $driving_years = -1;
                }
                if ($driving_years != -1) {
                    $data_user_licenses[] = [
                        'driving_id' => $driving_id,
                        'drivers_license' => $license['drivers_license'],
                        'driving_years' => $driving_years,
                    ];
                }
            }
        }

        //find the intersection between job and user licenses
        $data['intersect_licenses'] = [];
        $data['intersect_licenses'] = array_uintersect($data_user_licenses, $data['job_licenses'], function ($val1, $val2) {
            return strcmp($val1['driving_id'], $val2['driving_id']);
        });

        //check if the intersection returns 'none'

        function array_diff_function($array_1, $array_2)
        {
            foreach ($array_1 as $keya => $valuea) {
                if (in_array($valuea, $array_2)) {
                    unset($array_1[$keya]);
                }
            }
            return $array_1;
        }
        $non_matching_licenses[] = array_diff_function($data['job_licenses'], $data_user_licenses);

        $data['non_matching_licenses'] = array_values(reset($non_matching_licenses));

        return $data;

    }

    public function get_matching_skills($job_id, $properties)
    {
        //job data
        $job_skills = $this->admin_jobs_model->get_job_requirements($job_id);
        $data['job_skills'] = [];
        if ($job_skills) {
            foreach ($job_skills as $skill) {
                $data['job_skills'][] = [
                    'skill_id' => $skill->skill_id,
                    'skill' => $skill->skill,
                    'skill_type' => $skill->skill_type,
                ];
            }
        } else {
            //TODO if not set ?
            echo '<pre>';
            var_dump('no job skills, sorry');
            echo '</pre>';die;
        }

        //user data
        $data_user_skills = [];
        if (isset($properties['skill'])) {
            foreach ($properties['skill'] as $skill) {
                //get skills
                $skill_id = $skill['skill_id'];
                $data_user_skills[] = [
                    'skill_id' => $skill_id,
                    'skill' => $skill['skill_name'],
                    'skill_type' => $skill['skill_type'],
                ];
            }
        }
        $data['intersect_skills'] = [];
        $data['intersect_skills'] = array_uintersect($data_user_skills, $data['job_skills'], function ($val1, $val2) {
            return strcmp($val1['skill_id'], $val2['skill_id']);
        });


        function array_diff_function_skills($array_1, $array_2)
        {
            foreach ($array_1 as $keya => $valuea) {
                if (in_array($valuea, $array_2)) {
                    unset($array_1[$keya]);
                }
            }
            return $array_1;
        }
        $non_matching_skills[] = array_diff_function_skills($data['job_skills'], $data_user_skills);

        $data['non_matching_skills'] = array_values(reset($non_matching_skills));

        return $data;
    }

    //for items in the properties table:
    //DELETE FROM `properties` WHERE `prop_link_type` = 'drivers_license' and `prop_link_id` = 'driving_id' and `person_id` = 'person_id'

    //for items in the persons table
    // UPDATE `persons` SET `overtime`=[value-21],`nightshift`=[value-22],`other_shift`=[value-23],`weekdays`=[value-24],`saturday`=[value-25],`sunday`=[value-26],`bank_holidays`=[value-27] WHERE `person_id`=$person_id
    /**
     * delete drivers license from users properties
     *
     * @return void
     */
    public function delete_license()
    {
        //get job
        $job_id = $this->uri->segment(3, 0);
        //get license
        $prop_link_id = $this->uri->segment(4, 0);
        $main_join_table = 'properties';
        $prop_link_type = 'drivers_license';
        if (!$this->properties_model->delete_by_user_and_property_type($main_join_table, $this->person_id, $prop_link_id, $prop_link_type)) {
            //set message
            $this->session->set_flashdata('link_not_deleted', 'New link NOT deleted');
        } else {
            //set message
            $this->session->set_flashdata('link_deleted', 'New link deleted');
        }
        redirect('job_user/index/' . $job_id);

    }

    //for items in properties table:
    // INSERT INTO `properties`( `person_id`, `prop_link_id`, `prop_link_type`) VALUES ([value-1],[value-2],[value-3])

    //for items in the persons table
    // UPDATE `persons` SET `overtime`=[value-21],`nightshift`=[value-22],`other_shift`=[value-23],`weekdays`=[value-24],`saturday`=[value-25],`sunday`=[value-26],`bank_holidays`=[value-27] WHERE `person_id`=$person_id
    /**
     * Undocumented function
     *
     * @return void
     */
    public function add_license()
    {
        //get job
        $job_id = $this->uri->segment(3, 0);
        //get license
        $prop_link_id = $this->uri->segment(4, 0);
        $driving_years = $this->uri->segment(5, 0);
        $main_join_table = 'properties';
        $prop_link_type = 'drivers_license';
        //the drivers' license might already exist with insufficient years, if user clicks add, then update the years only
        //get property
        $querydata = [
            'person_id' => $this->person_id,
            'prop_link_id' => $prop_link_id,
            'prop_link_type' => $prop_link_type,
        ];
        $found_link = $this->properties_model->get_links($main_join_table, $querydata);
        if ($found_link) {
            //if anything found, update property
            $prop_id = $found_link[0]->prop_id;
            $this->properties_model->update_driving_years($main_join_table, $prop_id, $driving_years);
        } else {
            $new_property = [
                'person_id' => $this->person_id,
                'prop_link_id' => $prop_link_id,
                'prop_link_type' => $prop_link_type,
                'driving_years' => $driving_years,
            ];
            if (!$this->properties_model->add($main_join_table, $new_property)) {
                //set message
                $this->session->set_flashdata('link_not_added', 'New link NOT added');
            } else {
                //set message
                $this->session->set_flashdata('link_added', 'New link added');
            }
        }
        redirect('job_user/index/' . $job_id);
    }

    public function add_skill()
    {
        $job_id = $this->uri->segment(3, 0);
        $prop_link_id = $this->uri->segment(4, 0);
        $main_join_table = 'properties';
        //add skill to user properties
        $new_property = [
            'person_id' => $this->person_id,
            'prop_link_id' => $prop_link_id,
            'prop_link_type' => 'skill',

        ];
        $this->properties_model->add($main_join_table, $new_property);
        
        redirect('job_user/index/' . $job_id);
    }

    public function delete_skill()
    {
        $job_id = $this->uri->segment(3, 0);
        $prop_link_id = $this->uri->segment(4, 0);
        $prop_link_type = 'skill';
        $main_join_table = 'properties';
        
        $this->properties_model->delete_by_user_and_property_type($main_join_table,$this->person_id,$prop_link_id, $prop_link_type);
        redirect('job_user/index/' . $job_id);
        
    }

}
