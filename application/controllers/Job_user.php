<?php
defined('BASEPATH') or exit('No direct script access allowed');

class Job_user extends MY_Controller
{
    public $person_id;

    public function __construct()
    {
        parent::__construct();
        //Loading url helper
        $this->load->helper('url');
        if (!$this->session->userdata('logged_in') && $this->uri->segment(1, '') !== 'register' && $this->uri->segment(2, '') !== 'store_user') {
            redirect('login');
        }
        $this->person_id = $this->session->userdata('person_id');
    }

    public function index()
    {
        $data['title'] = 'Jobs for user';
        //get job
        $job_id = $this->uri->segment(3, 0);
        //$data['job'] = $this->admin_jobs_model->get_job_by_id($job_id)[0];
        $data['properties'] = $this->get_persons_properties('properties');
        //get users work hours properties from persons table
        $data['work_details'] = $this->person_model->get_persons_work_details($this->person_id);
        //put jobs in descending order
        $data['jobs'] = $this->get_jobs_with_match_rate($data['properties'], $data['work_details']);
        $key = array_search($job_id, array_column($data['jobs'], 'job_id'));
        $data['job'] = $data['jobs'][$key];
        foreach($data['job']['matching_skills_array'] as $item){
            $skill_types[] =  $item['skill_type']  ;
        }
        $data['skill_types'] = array_unique($skill_types);
        // echo '<pre>'; var_dump($skill_types); echo '</pre>'; die;
        $data['workprefs_array'] = [
            'location' => [
                'workplace',
                'remote',
            ],
            'days' => [
                'workdays',
                'saturday',
                'sunday',
                'bank_holidays',
                'sat_sun_bh_only',
            ],
            'hours' => [
                'normal_hours',
                'nightshift',
                'nightshift_only',
                'other_shift',
                'other_shift_only',
            ],
            'overtime' => [
                'overtime'
            ]
        ];
        //echo '<pre>'; var_dump($value); echo '</pre>'; die;
        $this->load->view('job_user_view', $data);
    }


    //for items in the properties table:
    //DELETE FROM `properties` WHERE `prop_link_type` = 'drivers_license' and `prop_link_id` = 'driving_id' and `person_id` = 'person_id'

    //for items in the persons table
    // UPDATE `persons` SET `overtime`=[value-21],`nightshift`=[value-22],`other_shift`=[value-23],`workdays`=[value-24],`saturday`=[value-25],`sunday`=[value-26],`bank_holidays`=[value-27] WHERE `person_id`=$person_id
    /**
     * delete drivers license from users properties
     *
     * @return void
     */
    public function delete_license()
    {
        //get job
        $job_id = $this->uri->segment(3, 0);
        //get license
        $prop_link_id = $this->uri->segment(4, 0);
        $main_join_table = 'properties';
        $prop_link_type = 'drivers_license';
        if (!$this->properties_model->delete_by_user_and_property_type($main_join_table, $this->person_id, $prop_link_id, $prop_link_type)) {
            //set message
            $this->session->set_flashdata('link_not_deleted', 'New link NOT deleted');
        } else {
            //set message
            $this->session->set_flashdata('link_deleted', 'New link deleted');
        }
        redirect('job_user/index/' . $job_id);
    }

    //for items in properties table:
    // INSERT INTO `properties`( `person_id`, `prop_link_id`, `prop_link_type`) VALUES ([value-1],[value-2],[value-3])

    //for items in the persons table
    // UPDATE `persons` SET `overtime`=[value-21],`nightshift`=[value-22],`other_shift`=[value-23],`workdays`=[value-24],`saturday`=[value-25],`sunday`=[value-26],`bank_holidays`=[value-27] WHERE `person_id`=$person_id
    /**
     * Undocumented function
     *
     * @return void
     */
    public function add_license()
    {
        //get job
        $job_id = $this->uri->segment(3, 0);
        //get license
        $prop_link_id = $this->uri->segment(4, 0);
        $driving_years = $this->uri->segment(5, 0);
        $main_join_table = 'properties';
        $prop_link_type = 'drivers_license';
        //the drivers' license might already exist with insufficient years, if user clicks add, then update the years only
        //get property
        $querydata = [
            'person_id' => $this->person_id,
            'prop_link_id' => $prop_link_id,
            'prop_link_type' => $prop_link_type,
        ];
        $found_link = $this->properties_model->get_links($main_join_table, $querydata);
        if ($found_link) {
            //if anything found, update property
            $prop_id = $found_link[0]->prop_id;
            $this->properties_model->update_driving_years($main_join_table, $prop_id, $driving_years);
        } else {
            $new_property = [
                'person_id' => $this->person_id,
                'prop_link_id' => $prop_link_id,
                'prop_link_type' => $prop_link_type,
                'driving_years' => $driving_years,
            ];
            if (!$this->properties_model->add($main_join_table, $new_property)) {
                //set message
                $this->session->set_flashdata('link_not_added', 'New link NOT added');
            } else {
                //set message
                $this->session->set_flashdata('link_added', 'New link added');
            }
        }
        redirect('job_user/index/' . $job_id);
    }

    public function add_skill()
    {
        $job_id = $this->uri->segment(3, 0);
        $prop_link_id = $this->uri->segment(4, 0);
        $main_join_table = 'properties';
        //add skill to user properties
        $new_property = [
            'person_id' => $this->person_id,
            'prop_link_id' => $prop_link_id,
            'prop_link_type' => 'skill',

        ];
        $this->properties_model->add($main_join_table, $new_property);

        redirect('job_user/index/' . $job_id);
    }

    public function delete_skill()
    {
        $job_id = $this->uri->segment(3, 0);
        $prop_link_id = $this->uri->segment(4, 0);
        $prop_link_type = 'skill';
        $main_join_table = 'properties';

        $this->properties_model->delete_by_user_and_property_type($main_join_table, $this->person_id, $prop_link_id, $prop_link_type);
        redirect('job_user/index/' . $job_id);
    }

    public function get_matching_work_hours($data)
    {
        //compare data with each other, use counter
        $counter = 0;
        if ($data['user_work_hours']['remote'] == $data['job']['remote']) {
            $counter++;
        }
        if ($data['user_work_hours']['overtime'] == $data['job']['overtime']) {
            $counter++;
        }
        if ($data['user_work_hours']['nightshift'] == $data['job']['nightshift']) {
            $counter++;
        }
        if ($data['user_work_hours']['other_shift'] == $data['job']['other_shift']) {
            $counter++;
        }
        if ($data['user_work_hours']['workdays'] == $data['job']['workdays']) {
            $counter++;
        }
        if ($data['user_work_hours']['saturday'] == $data['job']['saturday']) {
            $counter++;
        }
        if ($data['user_work_hours']['sunday'] == $data['job']['sunday']) {
            $counter++;
        }
        if ($data['user_work_hours']['bank_holidays'] == $data['job']['bank_holidays']) {
            $counter++;
        }
        return $counter;
    }
}
