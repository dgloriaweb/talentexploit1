<?php
defined('BASEPATH') or exit('No direct script access allowed');

class Job_user extends MY_Controller
{
    public $person_id;

    public function __construct()
    {
        parent::__construct();
        //Loading url helper
        $this->load->helper('url');
        if (!$this->session->userdata('logged_in') && $this->uri->segment(1, '') !== 'register' && $this->uri->segment(2, '') !== 'store_user') {
            redirect('login');
        }
        $this->person_id = $this->session->userdata('person_id');

    }

    public function index()
    {
        $data['title'] = 'Jobs';

    }

    /**
     * Undocumented function
     *
     * @var $data['job_licenses'] array
     * @var $data['user_licenses'] array
     * @return void
     */
    public function get_job()
    {
        $data['title'] = 'Jobs';

        //get job
        $job_id = $this->uri->segment(3, 0);
        $data['job'] = $this->admin_jobs_model->get_job_by_id($job_id)[0];
        //get job drivers licenses
        $job_licenses = $this->admin_jobs_model->get_jobs_drivers_licenses($job_id);
        $data['job_licenses'] = [];
        if ($job_licenses) {
            foreach ($job_licenses as $license) {
                $data['job_licenses'][] = [
                    'driving_id' => $license->driving_id,
                    'drivers_license' => $license->drivers_license,
                    'driving_years' => $license->years,
                ];

            }
        } else {
            //if not set, inform me, but should be defaulted to none
            echo '<pre>';
            var_dump('please setup the drivers license for this job');
            echo '</pre>';die;
        }
        //get the number of drivers licenses set
        $job_array_count = count($data['job_licenses']);

        //get users drivers licenses
        $properties = $this->get_persons_properties('properties');
        $data['user_licenses'] = [];
        if (isset($properties['drivers_license'])) {
            foreach ($properties['drivers_license'] as $license) {
                $driving_years = -1;
                //get drivers licenses
                $driving_id = $license['driving_id'];
                $job_license_of_user = $this->admin_jobs_model->get_jobs_drivers_licenses($job_id, $driving_id);
                if ($job_license_of_user) {
                    //compare drivers licenses years, and return the job year if greater or equal to.
                    $license['driving_years'] >= $job_license_of_user[0]->years ? $driving_years = $job_license_of_user[0]->years : $driving_years = -1;
                }
                $data['user_licenses'][] = [
                    'driving_id' => $driving_id,
                    'drivers_license' => $license['drivers_license'],
                    'driving_years' => $driving_years,
                ];
            }
        }

        //find the intersection between job and user licenses
        $data['intersect_licenses'] = [];
        $data['intersect_licenses'] = array_uintersect($data['job_licenses'], $data['user_licenses'], function ($val1, $val2) {
            return strcmp($val1['driving_id'], $val2['driving_id']);
        });

        //count the matches for the match rate
        $match_count = count($data['intersect_licenses']);

        //check if the intersection returns 'none'

        function array_diff_function($array_1, $array_2)
        {

            foreach ($array_1 as $keya => $valuea) {
                if (in_array($valuea, $array_2)) {
                    unset($array_1[$keya]);
                }
            }
            return $array_1;
        }
        $data['non_matching_licenses'] = array_diff_function($data['job_licenses'], $data['user_licenses']);

        //calculate rate of match from the job and the user properties
        $data['job_rate'] = round(($match_count * 100) / $job_array_count, 0);

        $this->load->view('job_user_view', $data);
    }

    public function delete()
    {
        //for items in the properties table:
        //DELETE FROM `properties` WHERE `prop_link_type` = 'drivers_license' and `prop_link_id` = 'driving_id' and `person_id` = 'person_id'

        //for items in the persons table
        // UPDATE `persons` SET `overtime`=[value-21],`nightshift`=[value-22],`other_shift`=[value-23],`weekdays`=[value-24],`saturday`=[value-25],`sunday`=[value-26],`bank_holidays`=[value-27] WHERE `person_id`=$person_id

    }

    public function add()
    {
        //for items in properties table:
        // INSERT INTO `properties`( `person_id`, `prop_link_id`, `prop_link_type`) VALUES ([value-1],[value-2],[value-3])

        //for items in the persons table
        // UPDATE `persons` SET `overtime`=[value-21],`nightshift`=[value-22],`other_shift`=[value-23],`weekdays`=[value-24],`saturday`=[value-25],`sunday`=[value-26],`bank_holidays`=[value-27] WHERE `person_id`=$person_id

    }

}
