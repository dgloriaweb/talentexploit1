<?php
defined('BASEPATH') or exit('No direct script access allowed');

class Job_user extends MY_Controller
{
    public $person_id;

    public function __construct()
    {
        parent::__construct();
        //Loading url helper
        $this->load->helper('url');
        if (!$this->session->userdata('logged_in') && $this->uri->segment(1, '') !== 'register' && $this->uri->segment(2, '') !== 'store_user') {
            redirect('login');
        }
        $this->person_id = $this->session->userdata('person_id');

    }

    public function index()
    {
        $data['title'] = 'Jobs';

    }
    public function get_job()
    {
        $data['title'] = 'Jobs';

        $job_id = $this->uri->segment(3, 0);
        $data['job'] = $this->admin_jobs_model->get_job_by_id($job_id)[0];
        $job_licenses = $this->admin_jobs_model->get_jobs_drivers_licenses($job_id);
        $data['job_licenses'] = [];
        if ($job_licenses) {
            foreach ($job_licenses as $job_license) {
                $data['job_licenses'][] = [
                    'driving_id' => $job_license->driving_id,
                    'drivers_license' => $job_license->drivers_license,
                ];

            }
        } else {
            echo '<pre>';
            var_dump('please setup the drivers license for this job');
            echo '</pre>';die;
        }
echo '<pre>'; var_dump($data['job_licenses']); echo '</pre>'; die;
        $data['properties'] = $this->get_persons_properties('properties');

        //old code
        /*

        //get matching jobs using MY_Controller
        $array_licenses= $this->calculate_drivers_license_match($job_id);
        //get license name
        $matching_licenses =  $this->drivers_model->get_license_types_by_id($array_licenses);

        $job_licenses = $this->admin_jobs_model->get_jobs_drivers_licenses($job_id);
        //build array of driving_ids
        $driving_ids =[];
        foreach($job_licenses as $job_license){
        $driving_ids [] = $job_license->driving_id;
        }
        if($driving_ids[0] == 1){
        //the job doesn't require a drivers license, so we return it as a match
        $non_matching_licenses =[];
        $licenses_array = $this->get_persons_properties('properties')['drivers_license'];
        foreach($licenses_array as $license){
        $matching_licenses[]=[
        'driving_id' => $license['driving_id'],
        'drivers_license' => $license['drivers_license']
        ];
        }
        } else {
        $non_matching_licenses = array_diff($driving_ids,$array_licenses);
        }
        $data['matching_licenses'] =  $matching_licenses;
        $data['non_matching_licenses'] =$this->drivers_model->get_license_types_by_id($non_matching_licenses);
         */

        $this->load->view('job_user_view', $data);
    }

    public function delete()
    {
        //for items in the properties table:
        //DELETE FROM `properties` WHERE `prop_link_type` = 'drivers_license' and `prop_link_id` = 'driving_id' and `person_id` = 'person_id'

        //for items in the persons table
        // UPDATE `persons` SET `overtime`=[value-21],`nightshift`=[value-22],`other_shift`=[value-23],`weekdays`=[value-24],`saturday`=[value-25],`sunday`=[value-26],`bank_holidays`=[value-27] WHERE `person_id`=$person_id

    }

    public function add()
    {
        //for items in properties table:
        // INSERT INTO `properties`( `person_id`, `prop_link_id`, `prop_link_type`) VALUES ([value-1],[value-2],[value-3])

        //for items in the persons table
        // UPDATE `persons` SET `overtime`=[value-21],`nightshift`=[value-22],`other_shift`=[value-23],`weekdays`=[value-24],`saturday`=[value-25],`sunday`=[value-26],`bank_holidays`=[value-27] WHERE `person_id`=$person_id

    }

}
