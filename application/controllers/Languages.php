<?php
defined('BASEPATH') or exit('No direct script access allowed');

class Languages extends CI_Controller
{
    public function __construct()
    {
        parent::__construct();
        if (!$this->session->userdata('logged_in') && $this->uri->segment(1, '') !== 'register' && $this->uri->segment(2, '') !== 'store_user') {
            redirect('login');
        }
    }

    public function add()
    {
        $this->form_validation->set_error_delimiters('<div class="alert alert-danger">', '</div>');
        $data['title'] = 'Add language';
        //TODO: try to move this into the constructor and see if it still works
        $person_id = $this->session->userdata('person_id');
        $data['languages'] = $this->person_model->get_person_languages($person_id);
        $this->form_validation->set_rules('language_selection', 'language_selection', 'required|callback_check_type_exists_language');
        $this->form_validation->set_rules('langlevel_selection', 'langlevel_selection', 'required|callback_check_type_exists_langlevel');
        if ($this->form_validation->run()) {
            $new_property = [
                'person_id' => $person_id,
                'prop_link_id' => $this->input->post('language_selection'),
                'langlevel_id' => $this->input->post('langlevel_selection'),
                'prop_link_type' => 'language',
            ];
            //this has to be stored in the person_links table
            if (!$this->properties_model->add($new_property)) {
                //set message
                $this->session->set_flashdata('language_not_added', 'New language NOT added');
            } else {
                //set message
                $this->session->set_flashdata('language_added', 'New language added');
            }
            redirect('persons/languages');

        } else {
            $this->load->view('languages_view', $data);

        }
    }

    /**
     * validate dropdown if selection is not forged
     *
     * @return void
     */
    public function check_type_exists_language()
    {
        $this->form_validation->set_message('check_type_exists', 'That type doesn\'t exist, please choose from the list.');
        if ($this->global_model->check_type_exists($this->input->post('language_selection'), 'language_id', 'languages')) {
            return true;
        } else {
            return false;
        }
    }
    public function check_type_exists_langlevel()
    {
        $this->form_validation->set_message('check_type_exists', 'That type doesn\'t exist, please choose from the list.');
        if ($this->global_model->check_type_exists($this->input->post('langlevel_selection'), 'langlevel_id', 'language_levels')) {
            return true;
        } else {
            return false;
        }
    }

    /**
     * Build complex json to send data to the modal ajax to show two dropdown two selects :)))))
     *
     * @return void
     */
    public function get_modal_data()
    {
        $person_id = $this->input->post('id');
        $id = $this->input->post('id_name'); //language_id
        $type = $this->input->post('type'); //language
        $table =  $this->input->post('table'); //languages
        //exclude duplicates from the dropdown
        $querydata = [
            'person_id' => $person_id,
            'prop_link_type' => $type,
        ];
        $excluding_items = $this->properties_model->get_link($querydata);
        $exclude_array = [];
        foreach ($excluding_items as $item) {
            $exclude_array[] = $item->prop_link_id;
        }

        $modal_results['languages'] = $this->properties_model->exclude_items($exclude_array,$id,$type,$table);

        $modal_results['langlevels'] = $this->languages_model->get_langlevels();
        echo json_encode($modal_results);

        exit();

    }
}