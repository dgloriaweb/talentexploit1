<?php
defined('BASEPATH') or exit('No direct script access allowed');

class Sectors extends CI_Controller
{
    public function __construct()
    {
        parent::__construct();
        if (!$this->session->userdata('logged_in') && $this->uri->segment(1, '') !== 'register' && $this->uri->segment(2, '') !== 'store_user') {
            redirect('login');
        }
    }

    public function add()
    {
        $main_join_fields = 'persons.person_id = properties.person_id';
        $where_field = 'properties.prop_link_type';
        $main_join_table = 'properties';
        if ($this->uri->segment(3, 0) == 'desire') {
            $main_join_fields = 'persons.person_id = desired_job_links.person_id';
            $where_field = 'desired_job_links.prop_link_type';
            $main_join_table = 'desired_job_links';
        }

        $this->form_validation->set_error_delimiters('<div class="alert alert-danger">', '</div>');
        $data['title'] = 'Add sector';
        $person_id = $this->session->userdata('person_id');

        $data['sectors'] = $this->person_model->get_person_properties($person_id, 'sector', 'sectors', $main_join_table.'.prop_link_id = sectors.sector_id',$main_join_table, $main_join_fields, $where_field);
        $sector_years = $this->input->post('sector_years');
        $this->form_validation->set_rules('sector_selection', 'sector_selection', 'required|callback_check_type_exists');
        $this->form_validation->set_rules('sector_years', 'sector_years', 'required|callback_check_number_range[' . $this->input->post('sector_years') . ']');
        if ($this->form_validation->run()) {
            $new_property = [
                'person_id' => $person_id,
                'prop_link_id' => $this->input->post('sector_selection'),
                'sector_years' => htmlentities($sector_years),
                'prop_link_type' => 'sector',
            ];

            //this has to be stored in the person_links table
            if (!$this->properties_model->add($main_join_table,$new_property)) {
                //set message
                $this->session->set_flashdata('sector_not_added', 'New sector NOT added');
            } else {
                //set message
                $this->session->set_flashdata('sector_added', 'New sector added');
            }
            redirect('persons/sectors/' . $this->uri->segment(3, 0));
        } else {
            $this->load->view('sectors_view', $data);
        }

    }

    /**
     * validate dropdown if selection is not forged
     *
     * @return void
     */
    public function check_type_exists()
    {
        $this->form_validation->set_message('check_type_exists', 'That type doesn\'t exist, please choose from the list.');
        if ($this->global_model->check_type_exists($this->input->post('sector_selection'), 'sector_id', 'sectors')) {
            return true;
        } else {
            return false;
        }
    }

    public function check_number_range($input_field)
    {
        $this->form_validation->set_message('check_number_range', 'Please set years between 1 and 90.');
        if ($input_field > 1 && $input_field < 90) {

            return true;
        } else {
            return false;
        }
    }

    /**
     * validate the entered value if it is acceptable
     *
     * @return void
     */
    public function get_years()
    {
        $property = $this->properties_model->get_link_by_prop_id($this->input->post('id'));
        if (isset($property)) {
            echo json_encode($property[0]);
            exit();

        }
    }

    public function edit()
    {
        $main_join_fields = 'persons.person_id = properties.person_id';
        $where_field = 'properties.prop_link_type';
        $main_join_table = 'properties';
        if ($this->uri->segment(3, 0) == 'desire') {
            $main_join_fields = 'persons.person_id = desired_job_links.person_id';
            $where_field = 'desired_job_links.prop_link_type';
            $main_join_table = 'desired_job_links';
        }
        $data['title'] = 'Update sector';
        $prop_id = $this->input->post('prop_id');
        $sector_years = $this->input->post('sector_years_update');
        $this->form_validation->set_rules('sector_years_update', 'sector_years_update', 'required|callback_check_number_range[' . $sector_years . ']');
        //edit the years of experience only, use validation
        if ($this->form_validation->run()) {
            $sector_years = htmlentities($sector_years);

            if (!$this->properties_model->update_sector_years($main_join_table,$prop_id, $sector_years)) {
                //set message
                $this->session->set_flashdata('sector_not_updated', 'Sector NOT updated');
            } else {
                //set message
                $this->session->set_flashdata('sector_updated', 'Sector updated');
            }
            redirect('persons/sectors/' . $this->uri->segment(3, 0));
        } else {
            $this->load->view('sectors_view', $data);
        }
    }
}
