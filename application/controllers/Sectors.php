<?php
defined('BASEPATH') or exit('No direct script access allowed');

class Sectors extends CI_Controller
{
    public function __construct()
    {
        parent::__construct();
        if (!$this->session->userdata('logged_in') && $this->uri->segment(1, '') !== 'register' && $this->uri->segment(2, '') !== 'store_user') {
            redirect('login');
        }
    }

    public function add()
    {
        $this->form_validation->set_error_delimiters('<div class="alert alert-danger">', '</div>');
        $data['title'] = 'Add sector';
        $person_id = $this->session->userdata('person_id');
        $data['sectors'] = $this->sectors_model->get_sectors($person_id);
        $sector_years = $this->input->post('sector_years');
        $this->form_validation->set_rules('sector_selection', 'sector_selection', 'required|callback_check_type_exists');
        $this->form_validation->set_rules('sector_years', 'sector_years', 'required|callback_check_number_range');
        if ($this->form_validation->run()) {
            $new_property = [
                'person_id' => $person_id,
                'prop_link_id' => $this->input->post('sector_selection'), 
                'sector_years' => htmlentities($sector_years),
                'prop_link_type' => 'sector'
            ];
        
            //this has to be stored in the person_links table
            if (!$this->properties_model->add($new_property)) {
                //set message
                $this->session->set_flashdata('sector_not_added', 'New sector NOT added');
            } else {
                //set message
                $this->session->set_flashdata('sector_added', 'New sector added');
            }
            redirect('persons/sectors');
        } else {
            $this->load->view('sectors_view', $data);
        }

    }

    public function exclude_existing_items()
    {
        $person_id = $this->input->post('id');
        $available_items = $this->sectors_model->exclude_items($person_id);
        echo json_encode($available_items);
        exit();

    }

    public function check_type_exists()
    {
        $this->form_validation->set_message('check_type_exists', 'That type doesn\'t exist, please choose from the list.');
        if ($this->sectors_model->check_type_exists($this->input->post('sector_selection'))) {

            return true;
        } else {
            return false;
        }
    }


    public function check_number_range()
    {

        $this->form_validation->set_message('check_number_range', 'Please set years between 1 and 90.');
        if ($this->input->post('sector_years') > 1 && $this->input->post('sector_years') < 90) {

            return true;
        } else {
            return false;
        }
    }
  }
