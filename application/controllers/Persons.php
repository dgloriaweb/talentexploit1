<?php
defined('BASEPATH') or exit('No direct script access allowed');

class Persons extends MY_Controller
{
    public $person_id;
    public $main_join_table;
     public  $maintitle;

    public function __construct()
    {
        parent::__construct();
        //Loading url helper
        $this->load->helper('url');
        if (!$this->session->userdata('logged_in') && $this->uri->segment(1, '') !== 'register' && $this->uri->segment(2, '') !== 'store_user') {
            redirect('login');
        }
        $this->person_id = $this->session->userdata('person_id');
        $this->main_join_table = 'properties';
        if ($this->uri->segment(3, 0) == 'desire') {
            $this->main_join_table = 'desired_job_links';
        }
        $this->maintitle='TalentExploit - ';
    }

    public function index()
    {
        $data['title'] = $this->maintitle . ' - ' .  'Welcome';
        $data['properties'] = [];
        $data['work_details'] = [];

        //if user is logged in, load their data
        //reset all properties to default
        if ($this->session->userdata('logged_in')) {
            $data['properties'] = $this->get_persons_properties('properties');
            $data['desires'] = $this->get_persons_properties('desired_job_links');
            $data['work_details'] = $this->person_model->get_persons_work_details($this->person_id);
        }
        //put jobs in descending order
        $data['jobs'] = $this->get_jobs_with_match_rate($data['properties'], $data['work_details']);

        //calculate filled data amount to get rate of completion
        $progress = $this->calculate_progress($data);
        $data['progress'] = $progress;
        $this->load->view('home_view', $data);
    }


    /**
     * calculate filled data amount to get rate of completion
     *
     * @param [int] $progress
     * @return void
     */
    public function calculate_progress($data)
    {
        $counter = 0;
        isset($data['properties']['drivers_license']) ? $counter++ : false;
        isset($data['properties']['skill']) ? $counter++ : false;
        isset($data['properties']['language']) ? $counter++ : false;
        isset($data['properties']['sector']) ? $counter++ : false;
        isset($data['properties']['citizenship']) ? $counter++ : false;
        $data['work_details']['overtime'] === null ? false : $counter++;
        $data['work_details']['nightshift'] === null ? false : $counter++;
        $data['work_details']['other_shift'] === null ? false : $counter++;
        isset($data['desires']['sector']) ? $counter++ : false;
        isset($data['desires']['language']) ? $counter++ : false;
        isset($data['desires']['skill']) ? $counter++ : false;
        isset($data['desires']['drivers_license']) ? $counter++ : false;

        //add progress percentage to data
        $progress = round(($counter * 100) / 12, 0);
        return $progress;
    }
    /**
     * register new user
     *
     * @return void
     */
    public function register()
    {
        $data['title'] = $this->maintitle . ' - ' . 'Sign Up';
        $this->load->view('register_view', $data);
    }
    /**
     * Register new user
     *
     * @return void
     */
    public function store_user()
    {
        $this->form_validation->set_error_delimiters('<div class="error">', '</div>');
        $data['title'] = $this->maintitle . ' - ' .  'Sign Up';
        $this->form_validation->set_rules('username', 'Username', 'required|min_length[5]|callback_check_username_exists');
        $this->form_validation->set_rules('password', 'Password', 'required|min_length[8]');
        $this->form_validation->set_rules('password2', 'Confirm Password', 'required|min_length[8]|matches[password]');

        if ($this->form_validation->run()) {
            //create user in persons table
            $enc_password = password_hash($this->input->post('password'), PASSWORD_BCRYPT, ['cost' => 11]);

            //TODO: REGISTERING DISABLED enable this when site is ready
            $person_id= $this->person_model->register($enc_password);
            if (!$person_id) {
                $this->session->set_flashdata('not_registered', 'Registration is unsuccessful1');
            } else {
                //set message
                $this->session->set_flashdata('user_registered', 'You are now registered and can log in');
                //add user log
                // `user_id`, `username`, `logged_in`, `is_admin`, `ci_session`, `created_at`, `updated_at`
                $user_id = $person_id;
                $username = '';
                $logged_in = 0;
                $is_admin = 0;
                $ci_session  = $this->input->cookie('ci_session');
                $action = 'register';
                $querydata = [
                    'user_id' => $user_id,
                    'username' => $username,
                    'logged_in' => $logged_in,
                    'is_admin' => $is_admin,
                    'ci_session' => $ci_session,
                    'action' => $action,
                ];
                //user action logged
                $this->user_actions_model->add($querydata);
                //send me email
                $action = 'register';
                $this->send_email($action, $user_id, $username);
            }
            redirect('persons');
        } else {
            $this->session->set_flashdata('not_registered', 'Check username or password!');
            $this->load->view('register_view', $data);
        }
    }

    /**
     * check_username_exists
     *
     * @param string $username
     * @return bool
     */
    public function check_username_exists($username)
    {
        $this->form_validation->set_message('check_username_exists', 'That username is already taken. Please choose a different one');
        if ($this->person_model->check_username_exists($username)) {

            return true;
        } else {
            return false;
        }
    }

    /**
     * logout
     *
     * @return void
     */
    public function logout()
    {
        $user_data = [
            'person_id',
            'username',
            'logged_in',
            'is_admin',
        ];
        $this->session->unset_userdata($user_data);
        $this->session->sess_destroy();
        redirect('persons');
    }


    // *** Details sections ***
    /**
     * open edit page for drivers licenses section
     *
     * @return void
     */
    public function drivers_license()
    {
        $main_join_table = $this->main_join_table;

        $data['title'] = $this->maintitle . ' - ' .  'Drivers license';
        $data['person_licenses'] = $this->person_model->get_person_properties($this->person_id, 'drivers_license', 'drivers', $main_join_table . '.prop_link_id = drivers.driving_id', $main_join_table, 'persons.person_id = ' . $main_join_table . '.person_id', $main_join_table . '.prop_link_type');
        $data['license_types'] = $this->drivers_model->get_license_types();
        $this->load->view('drivers_view', $data);
    }

    /**
     * open edit page for languages section
     *
     * @return void
     */
    public function languages()
    {
        $main_join_table = $this->main_join_table;
        $data['title'] = $this->maintitle . ' - ' .  'languages';
        $data['languages'] = $this->person_model->get_person_languages($main_join_table, $this->person_id);
        $this->load->view('languages_view', $data);
    }

    /**
     * open edit page for sectors section
     *
     * @return void
     */
    public function sectors()
    {
        $main_join_table = $this->main_join_table;
        $data['title'] = $this->maintitle . ' - ' .  'Sectors';
        $data['sectors'] = $this->person_model->get_person_properties($this->person_id, 'sector', 'sectors', $main_join_table . '.prop_link_id = sectors.sector_id', $main_join_table, 'persons.person_id = ' . $main_join_table . '.person_id', $main_join_table . '.prop_link_type');
        $this->load->view('detail_sectors_view', $data);
    }

    /**
     * open edit page for citizenships section
     *
     * @return void
     */
    public function citizenships()
    {
        $main_join_table = $this->main_join_table;
        $data['title'] = $this->maintitle . ' - ' .  'Citizenships';
        $data['citizenships'] = $this->person_model->get_person_properties($this->person_id, 'citizenship', 'citizenships', $main_join_table . '.prop_link_id = citizenships.citizen_id', $main_join_table, 'persons.person_id = ' . $main_join_table . '.person_id', $main_join_table . '.prop_link_type');
        $this->load->view('citizenships_view', $data);
    }

    /**
     * open edit page for skills section
     *
     * @return void
     */
    public function skills()
    {
        $main_join_table = $this->main_join_table;
        $data['title'] = $this->maintitle . ' - ' .  'Skills';
        $data['skills'] = $this->person_model->get_person_properties($this->person_id, 'skill', 'skills', $main_join_table . '.prop_link_id = skills.skill_id', $main_join_table, 'persons.person_id = ' . $main_join_table . '.person_id', $main_join_table . '.prop_link_type');
        $this->load->view('detail_skill_view', $data);
    }

    /**
     * Retracted delete method from all details page and included here for saving space
     *
     * @return void
     */
    public function delete()
    {
        //when extracting, pass this to the function from the view
        $redirect_link = $this->uri->segment(5, 0);

        $link_id = $this->uri->segment(4, 0);
        //watch out, here the 'desire is the 5th segment!
        $main_join_table = $this->main_join_table;

        //delete this record from the links table
        if (!$this->properties_model->delete_link_by_id($main_join_table, $link_id)) {
            //error
            $this->session->set_flashdata('link_cannot_be_deleted', 'Error deleting link');
        } else {
            $this->session->set_flashdata('link_removed', 'Item removed successfully');
        }
        redirect('persons/' . $redirect_link . '/' . $this->uri->segment(3, 0));
    }

    /**
     * Returns a json of the unused elements for a modal to use.
     *
     * @param [type] $id
     * @param [type] $prop_link_type
     * @param [type] $table
     * @return void
     */
    public function exclude_existing_items()
    {
        //if it's desire, use desired_job_links table
        // *** properties ***

        $id = htmlspecialchars($this->input->post('id_name'));
        $table = htmlspecialchars($this->input->post('table'));
        $main_join_table = $this->main_join_table;
        $prop_link_type = htmlspecialchars($this->input->post('type'));
        //exclude duplicates from the dropdown
        $querydata = [
            'person_id' => $this->person_id,
            'prop_link_type' => $prop_link_type,
        ];
        $excluding_items = $this->properties_model->get_links($main_join_table, $querydata);
        $exclude_array = [];
        foreach ($excluding_items as $item) {
            $exclude_array[] = $item->prop_link_id;
        }
        $available_items = $this->properties_model->exclude_items($exclude_array, $id, $table);

        echo json_encode($available_items);
        exit();
    }

}
