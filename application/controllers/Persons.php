<?php
defined('BASEPATH') or exit('No direct script access allowed');

class Persons extends CI_Controller
{
    public function __construct()
    {
        parent::__construct();
        //Loading url helper
        $this->load->helper('url');
        if (!$this->session->userdata('logged_in') && $this->uri->segment(1, '') !== 'register' && $this->uri->segment(2, '') !== 'store_user') {
            redirect('login');
        }
    }

    public function index()
    {
        $data['title'] = 'Welcome';
        $data['properties'] = [];
        //if user is logged in, load their data
        //reset all properties to default
        if ($this->session->userdata('logged_in')) {
            $data['properties'] = $this->get_persons_properties();
        }
        $this->load->view('home_view', $data);
    }

    /**
     * register new user
     *
     * @return void
     */
    public function register()
    {
        $data['title'] = 'Sign Up';
        $this->load->view('register_view', $data);

    }
    /**
     * Register new user
     *
     * @return void
     */
    public function store_user()
    {
        $this->form_validation->set_error_delimiters('<div class="error">', '</div>');
        $data['title'] = 'Sign Up';
        $this->form_validation->set_rules('username', 'Username', 'required|min_length[5]|callback_check_username_exists');
        $this->form_validation->set_rules('password', 'Password', 'required|min_length[8]');
        $this->form_validation->set_rules('password2', 'Confirm Password', 'required|min_length[8]|matches[password]');

        if ($this->form_validation->run()) {
            //create user in persons table
            $enc_password = password_hash($this->input->post('password'), PASSWORD_BCRYPT, ['cost' => 11]);

            //TODO: REGISTERING DISABLED enable this when site is ready
            //$new_person_id = $this->person_model->register($enc_password);
            ////set message
            //$this->session->set_flashdata('user_registered', 'You are now registered and can log in');
            $this->session->set_flashdata('unavailable', 'Site is currently under construction, please check back later');

            redirect('persons');

        } else {
            $this->load->view('register_view', $data);
        }
    }

    /**
     * check_username_exists
     *
     * @param string $username
     * @return bool
     */
    public function check_username_exists($username)
    {
        $this->form_validation->set_message('check_username_exists', 'That username is already taken. Please choose a different one');
        if ($this->person_model->check_username_exists($username)) {

            return true;
        } else {
            return false;
        }
    }

    /**
     * logout
     *
     * @return void
     */
    public function logout()
    {
        $user_data = [
            'person_id',
            'username',
            'logged_in',
            'is_admin',
        ];
        $this->session->unset_userdata($user_data);
        $this->session->sess_destroy();
        redirect('persons');
    }

    /**
     * Populate the dashboard page with the properties data
     *
     * @return void
     */
    public function get_persons_properties()
    {
        $person_id = $this->session->userdata('person_id');
        //go through the query and build report
        $properties_array = [];

        //drivers licenses
        $properties = $this->person_model->get_person_properties($person_id, 'driving', 'drivers', 'properties.prop_link_id = drivers.driving_id');
        if ($properties) {

            foreach ($properties as $property) {
                $properties_array['driving'][] = ['driving_type' => $property->drivers_license_type, 'driving_years' => $property->driving_years];
            }
        }
        //skills
        $properties = $this->person_model->get_person_properties($person_id, 'skill', 'skills', 'properties.prop_link_id = skills.skill_id');
        if ($properties) {
            foreach ($properties as $property) {
                $properties_array['skill'][] = ['skill_name' => $property->skill];
            }
        }

        //language
        $properties = $this->person_model->get_person_languages($person_id);
        if ($properties) {
            foreach ($properties as $property) {
                $properties_array['language'][] = ['language_name' => $property->language, 'langlevel_code' => $property->language_level];
            }
        }

        //sectors
        $properties = $this->person_model->get_person_properties($person_id, 'sector', 'sectors', 'properties.prop_link_id = sectors.sector_id');
        if ($properties) {
            foreach ($properties as $property) {
                $properties_array['sector'][] = ['sector' => $property->sector, 'sector_years' => $property->sector_years];
            }
        }

        //citizenships
        $properties = $this->person_model->get_person_properties($person_id, 'citizenship', 'citizenships', 'properties.prop_link_id = citizenships.citizen_id');
        if ($properties) {
            foreach ($properties as $property) {
                $properties_array['citizenship'][] = ['citizenship' => $property->citizenship];
            }
        }

        return $properties_array;
    }

    // *** Details sections ***
    /**
     * open edit page for drivers licenses section
     *
     * @return void
     */
    public function drivers_license()
    {
        $person_id = $this->session->userdata('person_id');
        $data['title'] = 'Drivers license';
        $data['person_licenses'] = $this->person_model->get_person_properties($person_id, 'driving', 'drivers', 'properties.prop_link_id = drivers.driving_id');
        $data['license_types'] = $this->drivers_model->get_license_types();
        $this->load->view('drivers_view', $data);
    }

    /**
     * open edit page for languages section
     *
     * @return void
     */
    public function languages()
    {
        $person_id = $this->session->userdata('person_id');
        $data['title'] = 'languages';
        $data['languages'] = $this->person_model->get_person_languages($person_id);
        $this->load->view('languages_view', $data);
    }

    /**
     * open edit page for sectors section
     *
     * @return void
     */
    public function sectors()
    {
        $person_id = $this->session->userdata('person_id');
        $data['title'] = 'Sectors';
        $data['sectors'] = $this->person_model->get_person_properties($person_id, 'sector', 'sectors', 'properties.`prop_link_id`= sectors.sector_id');
        $this->load->view('sectors_view', $data);
    }

    /**
     * open edit page for citizenships section
     *
     * @return void
     */
    public function citizenships()
    {
        $person_id = $this->session->userdata('person_id');
        $data['title'] = 'Citizenships';
        $data['citizenships'] = $this->person_model->get_person_properties($person_id, 'citizenship', 'citizenships', 'properties.prop_link_id = citizenships.citizen_id');
        $this->load->view('citizenships_view', $data);

    }

    /**
     * open edit page for skills section
     *
     * @return void
     */
    public function skills()
    {
        $person_id = $this->session->userdata('person_id');
        $data['title'] = 'Skills';
        $data['skills'] = $this->person_model->get_person_properties($person_id, 'skill', 'skills', 'properties.prop_link_id = skills.skill_id');
        $this->load->view('detail_skill_view', $data);

    }

    /**
     * Retracted delete method from all details page and included here for saving space
     *
     * @return void
     */
    public function delete()
    {
        //when extracting, pass this to the function from the view
        $redirect_link = $this->uri->segment(4, 0);

        $link_id = $this->uri->segment(3, 0);
        //delete this record from the links table
        if (!$this->properties_model->delete_link_by_id($link_id)) {
            //error
            $this->session->set_flashdata('link_cannot_be_deleted', 'Error deleting link');
        } else {
            $this->session->set_flashdata('link_removed', 'Link removed successfully');
        }
        redirect('persons/' . $redirect_link);
    }

    /**
     * Returns a json of the unused elements for a modal to use.
     *
     * @param [type] $id
     * @param [type] $prop_link_type
     * @param [type] $table
     * @return void
     */
    public function exclude_existing_items()
    {
        $person_id = $this->input->post('id');
            $id = $this->input->post('id_name');
            $prop_link_type = $this->input->post('type');
            $table = $this->input->post('table');
        //exclude duplicates from the dropdown
        $querydata = [
            'person_id' => $person_id,
            'prop_link_type' => $prop_link_type,
        ];
        $excluding_items = $this->properties_model->get_links($querydata);
        $exclude_array = [];
        foreach ($excluding_items as $item) {
            $exclude_array[] = $item->prop_link_id;
        }

        $available_items = $this->properties_model->exclude_items($exclude_array, $id, $table);
        echo json_encode($available_items);
        exit();

    }
}
