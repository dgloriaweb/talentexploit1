<?php
defined('BASEPATH') or exit('No direct script access allowed');

class Admin_jobs extends CI_Controller
{
    //create a place to handle edit and connect jobs, core jobs, jobs and all that's required
    public function __construct()
    {
        parent::__construct();
        if (!$this->session->userdata('logged_in') && $this->uri->segment(1, '') !== 'register' && $this->uri->segment(2, '') !== 'store_user') {
            redirect('login');
        }
        if (!$this->session->userdata('is_admin')) {
            redirect('login');
        }
    }

    public function index()
    {
        $data['title'] = 'Jobs';
        $data['jobs'] = $this->admin_jobs_model->get_jobs();
        $this->load->view('admin_jobs_view', $data);
    }

    public function edit_job()
    {
        $job_id = $this->uri->segment(3, 0);
        $data['skills'] = $this->admin_jobs_model->get_job_requirements($job_id);
        //show edit job page
        $data['title'] = 'Edit job';
        $data['jobs'] = $this->admin_jobs_model->get_jobs();
        $data['filtered_jobs'] = $this->admin_jobs_model->get_jobs($job_id);
        $data['job_data'] = $this->admin_jobs_model->get_job_by_id($job_id);
        $data['similar_jobs'] = $this->admin_jobs_model->get_job_similar_jobs($job_id);
        $data['drivers_licenses'] = $this->admin_jobs_model->get_jobs_drivers_licenses($job_id);
        $this->load->view('admin_job_edit_view', $data);

    }
    public function update_job_preferences()
    {
        $job_id = $this->uri->segment(3, 0);
        $querydata = [
            'remote' => $this->input->post('chkRemote') == 'on' ? 1 : 0,
            'overtime' => $this->input->post('chkOvertime') == 'on' ? 1 : 0,
            'nightshift' => $this->input->post('chkNightshift') == 'on' ? 1 : 0,
            'other_shift' => $this->input->post('chkOthershift') == 'on' ? 1 : 0,
            'weekdays' => $this->input->post('chkWeekday') == 'on' ? 1 : 0,
            'saturday' => $this->input->post('chkSaturday') == 'on' ? 1 : 0,
            'sunday' => $this->input->post('chkSunday') == 'on' ? 1 : 0,
            'bank_holidays' => $this->input->post('chkBankholidays') == 'on' ? 1 : 0,
        ];
        if (!$this->admin_jobs_model->update_job_preferences($job_id, $querydata)) {
            $this->session->set_flashdata('job_not_updated', 'Job update error');
        } else {
            $this->session->set_flashdata('job_updated', 'Job updated successfully');
        }
        redirect('admin_jobs/edit_job/' . $job_id);
    }

    public function update_job_keywords()
    {
        $job_id = $this->uri->segment(3, 0);
        //validate input box
        $keyword_add = htmlentities($this->input->post('keyword_add'));
        if (!$this->admin_jobs_model->add_keyword($job_id, $keyword_add)) {
            $this->session->set_flashdata('job_not_updated', 'Job update error');
        } else {
            $this->session->set_flashdata('job_updated', 'Job updated successfully');
        }
        redirect('admin_jobs/edit_job/' . $job_id);
    }

    public function update_similar_jobs()
    {
        $job_id = $this->uri->segment(3, 0);
        //validate select dropdown
        $selected_job = htmlentities($this->input->post('similar_job_select'));
        //store id of job instead of name into jobs table
        if (!$this->admin_jobs_model->update_similar_jobs($job_id, $selected_job)) {
            $this->session->set_flashdata('job_not_updated', 'Job update error');
        } else {
            $this->session->set_flashdata('job_updated', 'Job updated successfully');
        }
        redirect('admin_jobs/edit_job/' . $job_id);
    }
    public function remove_similar_job()
    {
        $job_id = $this->uri->segment(3, 0);
        $similar_job_id = $this->uri->segment(4, 0);
        if (!$this->admin_jobs_model->remove_similar_job($job_id, $similar_job_id)) {
            $this->session->set_flashdata('job_not_updated', 'Job update error');
        } else {
            $this->session->set_flashdata('job_updated', 'Job updated successfully');
        }
        redirect('admin_jobs/edit_job/' . $job_id);
    }
    public function remove_skill()
    {
        $job_id = $this->uri->segment(3, 0);
        $skill_id = $this->uri->segment(4, 0);
        if (!$this->admin_jobs_model->remove_skill($job_id, $skill_id)) {
            $this->session->set_flashdata('job_not_updated', 'Job update error');
        } else {
            $this->session->set_flashdata('job_updated', 'Job updated successfully');
        }
        redirect('admin_jobs/edit_job/' . $job_id);
    }

    public function exclude_existing_items()
    {
        $job_id = $this->uri->segment(3, 0);
        //make excluded list of skills for modal dropdown.

        $excluding_items = $this->admin_jobs_model->get_job_requirements($job_id);
        $exclude_array = [];
        foreach ($excluding_items as $item) {
            $exclude_array[] = $item['skill_id'];
        }
        $available_items = $this->admin_jobs_model->exclude_items($exclude_array);

        echo json_encode($available_items);
        exit();

    }

    public function add_skill()
    {
        //show add skill page
        $data['title'] = 'Add skill';
        $skill_id = $this->uri->segment(3, 0);
        $job_id = $this->uri->segment(4, 0);

        if (!$this->admin_jobs_model->store_skill($job_id, $skill_id)) {
            $this->session->set_flashdata('job_not_updated', 'Job update error');

        } else {
            $this->session->set_flashdata('job_updated', 'Job updated successfully');

        }
        redirect('admin_jobs/edit_job/' . $job_id);

    }

    public function add_job()
    {
        $job = htmlentities($this->input->post('new_job'));
        //validate input if necessary
        //trim too long text
        if (strlen($job) > 254) {
            $job = substr($job, 0, 254);
        }
        //add new job name
        $insert_id = $this->admin_jobs_model->add_job($job);
        if (!$insert_id) {
            $this->session->set_flashdata('job_not_added', 'Job add error');
        } else {
            $this->session->set_flashdata('job_added', 'Job added successfully');
        }
        redirect('admin_jobs/edit_job/' . $insert_id);
    }

    public function exclude_existing_items_licenses()
    {
        $job_id = $this->uri->segment(3, 0);
        //make excluded list of licenses for modal dropdown.

        $excluding_items = $this->admin_jobs_model->get_jobs_drivers_licenses($job_id);
        $exclude_array = [];
        foreach ($excluding_items as $item) {
            $exclude_array[] = $item['driving_id'];
        }
        $available_items = $this->admin_jobs_model->exclude_license_items($exclude_array);

        echo json_encode($available_items);
        exit();

    }
    public function add_license()
    {
        $data['title'] = 'Edit job';
        $job_id = $this->uri->segment(3, 0);
        $driving_id = $this->input->post('license_selection');
        $driving_years = $this->input->post('driving_years');
        $this->form_validation->set_rules('license_selection', 'license_selection', 'required|callback_check_type_exists');
        if ($this->input->post('license_selection') != 1) {
            $this->form_validation->set_rules('driving_years', 'driving_years', 'required|callback_check_number_range');
        } else {
            //if 'none' is selected, no need to set years
            $driving_years = null;
        }
        //if 'none' is selected accept selection
        if ($this->input->post('license_selection') != 1) {
            //check if 'none' has been already selected and if yes, remove it.
            $licenses = $this->admin_jobs_model->get_jobs_drivers_licenses($job_id);
            if ($licenses[0]->driving_id == 1) {
                $this->admin_jobs_model->remove_license($job_id);
            }
        } else {
            // if none is selected and user has any links ask if user wants to delete all existing links
            $this->admin_jobs_model->remove_license($job_id);
        }
        if ($this->form_validation->run()) {
            //do add bit
            if (!$this->admin_jobs_model->add_license($job_id, $driving_id, $driving_years)) {
                //set message
                $this->session->set_flashdata('license_not_added', 'New license NOT added');
            } else {
                //set message
                $this->session->set_flashdata('license_added', 'New license added');
            }
        } else {
            $this->session->set_flashdata('license_not_added', 'New license NOT added');
        }

        redirect('admin_jobs/edit_job/' . $job_id);
    }

    public function remove_license()
    {
        $job_id = $this->uri->segment(3, 0);
        $driving_id = $this->uri->segment(4, 0);
        if (!$this->admin_jobs_model->remove_license($job_id, $driving_id)) {

            //set message
            $this->session->set_flashdata('license_not_deleted', 'New license NOT deleted');
        } else {
            //set message
            $this->session->set_flashdata('license_deleted', 'New license deleted');
        }
        redirect('admin_jobs/edit_job/' . $job_id);
    }

    /**
     * validate dropdown if selection is not forged
     *
     * @return void
     */
    public function check_type_exists()
    {
        $this->form_validation->set_message('check_type_exists', 'That type doesn\'t exist, please choose from the list.');
        if ($this->global_model->check_type_exists($this->input->post('license_selection'), 'driving_id', 'drivers')) {
            return true;
        } else {
            return false;
        }
    }

    /**
     * validate the entered value if it is acceptable
     *
     * @return void
     */
    public function check_number_range()
    {
        $this->form_validation->set_message('check_number_range', 'Please set years between 1 and 90.');
        if ($this->input->post('driving_years') > 0 && $this->input->post('driving_years') < 90) {
            return true;
        } else {
            return false;
        }
    }
}
