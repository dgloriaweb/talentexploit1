<?php
defined('BASEPATH') or exit('No direct script access allowed');

class Admin_jobs extends MY_Controller
{
    //create a place to handle edit and connect jobs, core jobs, jobs and all that's required
    public function __construct()
    {
        parent::__construct();
        if (!$this->session->userdata('logged_in') && $this->uri->segment(1, '') !== 'register' && $this->uri->segment(2, '') !== 'store_user') {
            redirect('login');
        }
        if (!$this->session->userdata('is_admin')) {
            redirect('login');
        }
    }

    public function index()
    {
        $data['title'] = 'Jobs';
        $data['jobs'] = $this->admin_jobs_model->get_jobs();
        $this->load->view('admin_jobs_view', $data);
    }

    public function edit_job()
    {
        $job_id = $this->uri->segment(3, 0);
        $data['skills'] = $this->admin_jobs_model->get_job_requirements($job_id);
        //show edit job page
        $data['title'] = 'Edit job';
        $data['jobs'] = $this->admin_jobs_model->get_jobs();
        $data['filtered_jobs'] = $this->admin_jobs_model->get_jobs($job_id);
        $data['work_details'] = $this->admin_jobs_model->get_job_by_id($job_id);
        // keep this just to avoid the naming misunderstandings
        $data['job_data'] = $data['work_details'];
        $data['similar_jobs'] = $this->admin_jobs_model->get_job_similar_jobs($job_id);
        $data['properties']['drivers_licenses'] = $this->admin_jobs_model->get_jobs_drivers_licenses($job_id);
        foreach ($data['skills'] as $item) {
            $skill_types[] =  $item['skill_type'];
        }
        $data['skill_types'] = array_unique($skill_types);

        $this->load->view('admin_job_edit_view', $data);
    }

    public function update_job_keywords()
    {
        $job_id = $this->uri->segment(3, 0);
        //validate input box
        $keyword_add = htmlspecialchars($this->input->post('keyword_add'));
        if (!$this->admin_jobs_model->update_keyword($job_id, $keyword_add)) {
            $this->session->set_flashdata('job_not_updated', 'Job update error');
        } else {
            $this->session->set_flashdata('job_updated', 'Job updated successfully');
        }
        redirect('admin_jobs/edit_job/' . $job_id);
    }

    public function update_similar_jobs()
    {
        $job_id = $this->uri->segment(3, 0);
        //validate select dropdown
        $selected_job = htmlspecialchars($this->input->post('similar_job_select'));
        //store id of job instead of name into jobs table
        if (!$this->admin_jobs_model->update_similar_jobs($job_id, $selected_job)) {
            $this->session->set_flashdata('job_not_updated', 'Job update error');
        } else {
            $this->session->set_flashdata('job_updated', 'Job updated successfully');
        }
        redirect('admin_jobs/edit_job/' . $job_id);
    }
    public function delete_similar_job()
    {
        $job_id = $this->uri->segment(3, 0);
        $similar_job_id = $this->uri->segment(4, 0);
        if (!$this->admin_jobs_model->delete_similar_job($job_id, $similar_job_id)) {
            $this->session->set_flashdata('job_not_updated', 'Job update error');
        } else {
            $this->session->set_flashdata('job_updated', 'Job updated successfully');
        }
        redirect('admin_jobs/edit_job/' . $job_id);
    }

    public function delete_keyword($job_id, $keyword)
    {
        $keyword = urldecode($keyword);
        if (!$this->admin_jobs_model->delete_keyword($job_id, $keyword)) {
            $this->session->set_flashdata('job_not_updated', 'Job update error');
        } else {
            $this->session->set_flashdata('job_updated', 'Job updated successfully');
        }
        redirect('admin_jobs/edit_job/' . $job_id);
    }

    public function delete_skill()
    {
        $job_id = $this->uri->segment(3, 0);
        $skill_id = $this->uri->segment(4, 0);
        if (!$this->admin_jobs_model->delete_skill($job_id, $skill_id)) {
            $this->session->set_flashdata('job_not_updated', 'Job update error');
        } else {
            $this->session->set_flashdata('job_updated', 'Job updated successfully');
        }
        redirect('admin_jobs/edit_job/' . $job_id.'/#admin_jobs_edit_skills');
    }

    public function exclude_existing_items()
    {
        $job_id = $this->uri->segment(3, 0);
        //make excluded list of skills for modal dropdown.

        $excluding_items = $this->admin_jobs_model->get_job_requirements($job_id);
        $exclude_array = [];
        foreach ($excluding_items as $item) {
            $exclude_array[] = $item['skill_id'];
        }
        $available_items = $this->admin_jobs_model->exclude_items($exclude_array);

        echo json_encode($available_items);
        exit();
    }

    public function add_skill()
    {
        //show add skill page
        $data['title'] = 'Add skill';
        $skill_id = $this->uri->segment(3, 0);
        $job_id = $this->uri->segment(4, 0);

        if (!$this->admin_jobs_model->store_skill($job_id, $skill_id)) {
            $this->session->set_flashdata('job_not_updated', 'Job update error');
        } else {
            $this->session->set_flashdata('job_updated', 'Job updated successfully');
        }
        redirect('admin_jobs/edit_job/' . $job_id.'/#admin_jobs_edit_skills');
    }

    public function add_job()
    {
        $job = htmlspecialchars($this->input->post('new_job'));
        //validate input if necessary
        //trim too long text
        if (strlen($job) > 254) {
            $job = substr($job, 0, 254);
        }
        //add new job name
        $insert_id = $this->admin_jobs_model->add_job($job);
        if (!$insert_id) {
            $this->session->set_flashdata('job_not_added', 'Job add error');
        } else {
            $this->session->set_flashdata('job_added', 'Job added successfully');
        }
        redirect('admin_jobs/edit_job/' . $insert_id);
    }

    public function exclude_existing_items_licenses()
    {
        $job_id = $this->uri->segment(3, 0);
        //make excluded list of licenses for modal dropdown.

        $excluding_items = $this->admin_jobs_model->get_jobs_drivers_licenses($job_id);
        $exclude_array = [];
        foreach ($excluding_items as $item) {
            $exclude_array[] = $item['driving_id'];
        }
        $available_items = $this->admin_jobs_model->exclude_license_items($exclude_array);

        echo json_encode($available_items);
        exit();
    }
}
