<?php
defined('BASEPATH') or exit('No direct script access allowed');

class Drivers extends CI_Controller
{
    public function __construct()
    {
        parent::__construct();
        if (!$this->session->userdata('logged_in') && $this->uri->segment(1, '') !== 'register' && $this->uri->segment(2, '') !== 'store_user') {
            redirect('login');
        }
    }

    public function add()
    {
        //if the selected is 'none', check if anything is selected already
        //if anything is selected ask if all else can be deleted?
        //check how missing driving years affects other parts of the program
        
        $this->form_validation->set_error_delimiters('<div class="alert alert-danger">', '</div>');
        $data['title'] = 'Add license';
        $person_id = $this->session->userdata('person_id');
        $data['person_licenses'] = $this->drivers_model->get_drivers($person_id);
        $driving_years = $this->input->post('driving_years');
        $this->form_validation->set_rules('license_selection', 'license_selection', 'required|callback_check_type_exists');
        //if 'none' is selected accept selection without driving years field validation
        if($this->input->post('license_selection') != 1) {
            //check if 'none' has been already selected and if yes, remove it.
            //use get_link, send data: `person_id` = person_id AND `prop_link_id` = 1 AND `prop_link_type` = 'driving'
            $data = [
                'person_id' => $person_id,
                'prop_link_id' => 1,
                'prop_link_type' => 'driving',
            ];
            $link_to_none_exists = $this->drivers_model->get_link($data);
            if ($link_to_none_exists) {
                //if it returns a row, delete that row by properties_id
                $prop_id = $link_to_none_exists[0]->prop_id;
                $this->drivers_model->delete_link_by_id($prop_id);
            }

            //set validation for selection
            $this->form_validation->set_rules('driving_years', 'driving_years', 'required|callback_check_number_range');
        } else {
            // if none is selected and user has any links ask if user wants to delete all existing links
            $data = [
                'person_id' => $person_id,
                'prop_link_type' => 'driving',
            ];
            $drivers_license_links = $this->drivers_model->get_link($data);
            if ($drivers_license_links) {
                //TODO: alert user that all is going to be deleted
                foreach ($drivers_license_links as $drivers_license_link){
                    $prop_id = $drivers_license_link->prop_id;
                    $this->drivers_model->delete_link_by_id($prop_id);
                }
            }

            //if 'none' is selected, reset driving_years field, this can be removed later when javascript runs
            $driving_years = 0;
        }
        if ($this->form_validation->run()) {
            //get driving_id from the drivers license code
            $license_data = [
                'person_id' => $this->session->userdata('person_id'),
                //we have license type, we don't have the id, check if we do, we need the driving_id
                'prop_link_id' => $this->input->post('license_selection'), //get real data here
                'driving_years' => htmlentities($driving_years),
            ];


            //this has to be stored in the person_links table
            if (!$this->drivers_model->add($license_data)) {
                //set message
                $this->session->set_flashdata('license_not_added', 'New license NOT added');
                redirect('persons/drivers_license');

            } else {

                //set message
                $this->session->set_flashdata('license_added', 'New license added');
                redirect('persons/drivers_license');
            }
        } else {
            $this->load->view('drivers_view', $data);
        }
    }

    public function exclude_existing_licenses()
    {
        $person_id = $this->input->post('id');
        $available_licenses = $this->drivers_model->exclude_licences($person_id);
        echo json_encode($available_licenses);
        exit();

    }

    public function check_type_exists()
    {
        $this->form_validation->set_message('check_type_exists', 'That type doesn\'t exist, please choose from the list.');
        if ($this->drivers_model->check_type_exists($this->input->post('license_selection'))) {

            return true;
        } else {
            return false;
        }
    }
    public function check_number_range()
    {

        $this->form_validation->set_message('check_number_range', 'Please set years between 1 and 90.');
        if ($this->input->post('driving_years') > 1 && $this->input->post('driving_years') < 90) {

            return true;
        } else {
            return false;
        }
    }
    public function delete()
    {
        $link_id = $this->uri->segment(3, 0);
        //delete this record from the links table
        if (!$this->drivers_model->delete_link_by_id($link_id)) {

            //error
            $this->session->set_flashdata('link_cannot_be_deleted', 'Error deleting link');
            redirect('drivers/drivers_license/' . $link_id);

        } else {
            $this->session->set_flashdata('link_removed', 'Drivers\' license removed successfully');
            redirect('persons/drivers_license');
        }
    }
}
