<?php
defined('BASEPATH') or exit('No direct script access allowed');

class Drivers extends CI_Controller
{
    public function __construct()
    {
        parent::__construct();
        if (!$this->session->userdata('logged_in') && $this->uri->segment(1, '') !== 'register' && $this->uri->segment(2, '') !== 'store_user') {
            redirect('login');
        }
    }

    public function add()
    {
        //if detail is passed set join to properties
        //if desired is passed, set join to desired_job_links
        $main_join_fields = 'persons.person_id = properties.person_id';
        $where_field = 'properties.prop_link_type';
        $main_join_table = 'properties';
        if ($this->uri->segment(3, 0) == 'desire') {
            $main_join_fields = 'persons.person_id = desired_job_links.person_id';
            $where_field = 'desired_job_links.prop_link_type';
            $main_join_table = 'desired_job_links';
        }

        //if the selected is 'none', check if anything is selected already
        //if anything is selected ask if all else can be deleted?
        //check how missing driving years affects other parts of the program

        $this->form_validation->set_error_delimiters('<div class="alert alert-danger">', '</div>');
        $data['title'] = 'Add license';
        $person_id = $this->session->userdata('person_id');
        $data['person_licenses'] = $this->person_model->get_person_properties($person_id, 'drivers_license', 'drivers', $main_join_table . '.prop_link_id = drivers.driving_id', $main_join_table, $main_join_fields, $where_field);
        $driving_years = intval($this->input->post('driving_years'));
        $this->form_validation->set_rules('license_selection', 'license_selection', 'required|callback_check_type_exists');

        //if 'none' is selected accept selection without driving years field validation
        if (htmlspecialchars($this->input->post('license_selection')) != 1) {
            //check if 'none' has been already selected and if yes, remove it.
            //use get_links, send data: `person_id` = person_id AND `prop_link_id` = 1 AND `prop_link_type` = 'drivers_license'
            $querydata = [
                'person_id' => $person_id,
                'prop_link_id' => 1,
                'prop_link_type' => 'drivers_license',
            ];
            $link_to_none_exists = $this->properties_model->get_links($main_join_table, $querydata);
            if ($link_to_none_exists) {
                //if it returns a row, delete that row by properties_id
                $prop_id = $link_to_none_exists[0]->prop_id;
                $this->properties_model->delete_link_by_id($main_join_table, $prop_id);
            }
            //set validation for selection
            $this->form_validation->set_rules('driving_years', 'driving_years', 'required|callback_check_number_range');
        } else {
            // if none is selected and user has any links ask if user wants to delete all existing links
            $querydata = [
                'person_id' => $person_id,
                'prop_link_type' => 'drivers_license',
            ];
            $drivers_license_links = $this->properties_model->get_links($main_join_table, $querydata);
            if ($drivers_license_links) {
                //TODO: alert user that all is going to be deleted
                foreach ($drivers_license_links as $drivers_license_link) {
                    $prop_id = $drivers_license_link->prop_id;
                    $this->properties_model->delete_link_by_id($main_join_table, $prop_id);
                }
            }

            //if 'none' is selected, reset driving_years field, this can be removed later when javascript runs
            $driving_years = 0;
        }
        if ($this->form_validation->run()) {
            //get driving_id from the drivers license code
            $new_property = [
                'person_id' => $person_id,
                //we have license type, we don't have the id, check if we do, we need the driving_id
                'prop_link_id' => htmlspecialchars($this->input->post('license_selection')),
                'driving_years' => htmlspecialchars($driving_years),
                'prop_link_type' => 'drivers_license',
            ];

            //this has to be stored in the person_links table
            if (!$this->properties_model->add($main_join_table, $new_property)) {
                //set message
                $this->session->set_flashdata('license_not_added', 'New license NOT added');
            } else {
                //set message
                $this->session->set_flashdata('license_added', 'New license added');
            }
        } else {
            $this->session->set_flashdata('license_not_added', 'New license NOT added');
        }
        redirect('persons/drivers_license/' . $this->uri->segment(3, 0));
    }

    /**
     * validate dropdown if selection is not forged
     *
     * @return void
     */
    public function check_type_exists()
    {
        $this->form_validation->set_message('check_type_exists', 'That type doesn\'t exist, please choose from the list.');
        if ($this->global_model->check_type_exists(htmlspecialchars($this->input->post('license_selection')), 'driving_id', 'drivers')) {
            return true;
        } else {
            return false;
        }
    }

    /**
     * validate the entered value if it is acceptable
     *
     * @return void
     */
    public function check_number_range()
    {
        $driving_years = intval($this->input->post('driving_years'));
        $this->form_validation->set_message('check_number_range', 'Please set years between 1 and 90.');
        if ($driving_years > 0 && $driving_years < 90) {
            return true;
        } else {
            return false;
        }
    }
}
