<?php
defined('BASEPATH') or exit('No direct script access allowed');

class Calculate_match_trait extends CI_Controller
{
   
    public function get_jobs_with_match_rate($properties, $work_details)
    {
        $jobs = $this->admin_jobs_model->get_jobs();

        foreach ($jobs as $key => $job) {

            //pass full job array to work with in the methods

            //skills
            $skill_match =  $this->calculate_skill_match($job, $properties);
            $user_skills_count = $skill_match['matching_skills_count'];
            $job_skills_count = $skill_match['job_skills_count'];
            $matching_skills_array = $skill_match['matching_skills_array'];
            $mismatching_skills_array = $skill_match['mismatching_skills_array'];

            //drivers licenses
            $license_match = $this->calculate_drivers_license_match($job, $properties);
            $user_licenses_count = $license_match['matching_licenses_count'];
            $job_licenses_count = $license_match['job_licenses_count'];
            $matching_licenses_array = $license_match['matching_licenses_array'];
            $mismatching_licenses_array = $license_match['mismatching_licenses_array'];

            //work hours
            $work_details_match = $this->calculate_work_details_match($job, $work_details);
            $user_work_prefs_count = $work_details_match['matching_work_details_count'];
            $job_work_prefs_count = $work_details_match['job_work_details_count'];

            //get accumulated values for rate calculation
            $total_user_data = $user_skills_count + $user_licenses_count + $user_work_prefs_count;
            $total_job_data = $job_skills_count + $job_licenses_count + $job_work_prefs_count;

            if ($total_job_data) {
                $job_rate = round(($total_user_data * 100) / $total_job_data);
            } else {
                $job_rate = 0;
            }
            $jobs[$key]['job_rate'] = $job_rate;
            $jobs[$key]['matching_licenses_array'] = $matching_licenses_array;
            $jobs[$key]['mismatching_licenses_array'] = $mismatching_licenses_array;
            $jobs[$key]['matching_skills_array'] = $matching_skills_array;
            $jobs[$key]['mismatching_skills_array'] = $mismatching_skills_array;
        }
        //sort the array from largest rate to smallest rate
        $job_rate = array_column($jobs, 'job_rate');
        $job_name = array_column($jobs, 'job_name');

        // Sort the data with volume descending, edition ascending
        // Add $data as the last parameter, to sort by the common key
        array_multisort($job_rate, SORT_DESC, $job_name, SORT_ASC, $jobs);

        return $jobs;
    }

    public function calculate_work_details_match($job, $work_details)
    {
        // get match rate for hours 
        $match_hours = $this->match_hours($job, $work_details);
        // get match rate for days 
        $match_days = $this->match_days($job, $work_details);
        // get match rate for hours 
        // if user selection is remote only, and the job is workplace then the whole match is 0
        if (($work_details['workplace'] != 1 && $job['remote'] != 1) || ($work_details['remote'] != 1 && $job['workplace'] != 1)) {
            //no match 
            $match_hours = 0;
            $match_days = 0;
        } else {
            $match_hours++;
            $match_days++;
        }
        // skip overtime

        // add received values up
        $return_array['job_work_details_count'] = $match_hours['hours_match_base'] + $match_days['days_match_base'];
        $return_array['matching_work_details_count'] =  $match_hours['hours_match_value'] + $match_days['days_match_value'];

        return $return_array;
    }

    public function match_hours($job, $work_details)
    {
        // step 1: understand each selection case that can occur for both jobs and users
        //these are the x and y columns of the table
        //numbers in order: normal_hours, nightshift, nightshift_only, other_shift, other_shift_only
        //above can have the following setup
        $cases = [
            // normal_hours
            'sh1' => '10000',
            // normal + nightshift
            'sh2' => '11000',
            // normal + other_shift
            'sh3' => '10010',
            // normal + ns + os
            'sh4' => '11010',
            // nightshift_only
            'sh5' => '01100',
            // other_shift_only
            'sh6' => '00011',
            // nightshift + other_shift
            'sh7' => '01010',
        ];

        // build above setup from current database values
        $hu1 = $work_details['normal_hours'];
        $hu2 = $work_details['nightshift'];
        $hu3 = $work_details['nightshift_only'];
        $hu4 = $work_details['other_shift'];
        $hu5 = $work_details['other_shift_only'];

        $user_selection = $hu1 . $hu2 . $hu3 . $hu4 . $hu5;
        // find the matching setup from above
        $user_selection_code = '';
        foreach ($cases as $key => $value) {
            if ($value == $user_selection) {
                $user_selection_code = $key;
            }
        }

        // build above setup from current database values
        $hj1 = $job['normal_hours'];
        $hj2 = $job['nightshift'];
        $hj3 = $job['nightshift_only'];
        $hj4 = $job['other_shift'];
        $hj5 = $job['other_shift_only'];

        $job_selection = $hj1 . $hj2 . $hj3 . $hj4 . $hj5;
        // find the matching setup from above
        $job_selection_code = '';
        foreach ($cases as $key => $value) {
            if ($value == $job_selection) {
                $job_selection_code = $key;
            }
        }
        //compare the result and get result from table
        $match_rate = $this->global_model->get_match_hours($user_selection_code, $job_selection_code);
        if (!is_array($match_rate)) {
            echo '<pre>';
            var_dump('error in calculating hours');
            echo '</pre>';
            die;
        }
        $return_array['hours_match_base'] = 4;
        $return_array['hours_match_value'] = $match_rate[$job_selection_code];

        return $return_array;
    }

    public function match_days($job, $work_details)
    {
        // matching workdays, sat, sun, bh and sat_sun_bh_only with each other
        $cases = [
            'sd1' =>    '00001',
            'sd2' =>    '00010',
            'sd3' =>    '00100',
            'sd4' =>    '00110',
            'sd5' =>    '01000',
            'sd6' =>    '01010',
            'sd7' =>    '10000',
            'sd8' =>    '10010',
            'sd9' =>    '10100',
            'sd10' =>    '11000',
            'sd11' =>    '11010',
            'sd12' =>    '10110',
            'sd13' =>    '11100',
            'sd14' =>    '11110',
            'sd15' => '01100'
        ];
        // build above setup from current database values
        $du1 = $work_details['workdays'];
        $du2 = $work_details['saturday'];
        $du3 = $work_details['sunday'];
        $du4 = $work_details['bank_holidays'];
        $du5 = $work_details['sat_sun_bh_only'];

        $user_selection = $du1 . $du2 . $du3 . $du4 . $du5;
        // find the matching setup from above
        $user_selection_code = '';
        foreach ($cases as $key => $value) {
            if ($value == $user_selection) {
                $user_selection_code = $key;
            }
        }
        // build above setup from current database values
        $dj1 = $job['workdays'];
        $dj2 = $job['saturday'];
        $dj3 = $job['sunday'];
        $dj4 = $job['bank_holidays'];
        $dj5 = $job['sat_sun_bh_only'];

        $job_selection = $dj1 . $dj2 . $dj3 . $dj4 . $dj5;
        // find the matching setup from above
        $job_selection_code = '';
        foreach ($cases as $key => $value) {
            if ($value == $job_selection) {
                $job_selection_code = $key;
            }
        }
        //compare the result and get result from table
        $match_rate = $this->global_model->get_match_days($user_selection_code, $job_selection_code);
        if (!is_array($match_rate)) {
            echo '<pre>';
            var_dump('error in calculating days');
            echo '</pre>';
            die;
        }
        $return_array['days_match_base'] = 6;
        $return_array['days_match_value'] = $match_rate[$job_selection_code];

        return $return_array;
    }


    public function calculate_drivers_license_match($job, $properties)
    {
        $job_id = $job['job_id'];
        $job_licenses_array = [];
        $job_licenses_array = $this->admin_jobs_model->get_jobs_drivers_licenses($job_id);

        $return_array['job_licenses'] = $job_licenses_array;
        $return_array['job_licenses_count'] = count($job_licenses_array);
        //if the job has none selected, no need to calculate anything

        if ($job_licenses_array[0]['driving_id'] == 1) {

            $matching_licenses_array[]  = $job_licenses_array[0];
            $mismatching_licenses_array = [];
        } else {
            if (!isset($properties['drivers_licenses'])) {
                $matching_licenses_array = [];
            } else {
                $matching_licenses_array = array_uintersect($job_licenses_array, $properties['drivers_licenses'], function ($val1, $val2) {
                    return strcmp($val1['driving_id'], $val2['driving_id']);
                });
                
                //get all match results, and compare years with users 
                foreach ($matching_licenses_array as $key => $job_license) {
                    //get corresponding year data from user licenses
                    foreach ($properties['drivers_licenses'] as $key2 => $user_license) {
                        if ($user_license['driving_id'] === $job_license['driving_id']) {
                            //check if the job years are smaller than the users
                            if ($job_license['driving_years'] > $user_license['driving_years']) {
                                unset($matching_licenses_array[$key]);
                            }
                        }
                    }
                }
            }

            $mismatching_licenses_array = array_udiff($job_licenses_array, $matching_licenses_array, function ($a, $b) {
                return ($a['driving_id'] - $b['driving_id']);
            });
        }

        $return_array['job_licenses'] = $job_licenses_array;
        $return_array['job_licenses_count'] = count($job_licenses_array);
        $return_array['matching_licenses_array'] = $matching_licenses_array;
        $return_array['matching_licenses_count'] = count($matching_licenses_array);
        $return_array['mismatching_licenses_array'] = $mismatching_licenses_array;

        return $return_array;
    }
    public function calculate_skill_match($job, $properties)
    {
        //set defaults
        $job_id = $job['job_id'];
        //calculate job rate and append to jobs array
        //skill return
        $job_skills_array = $this->admin_jobs_model->get_job_requirements($job_id);

        //if there is no skill set up, then return empty array
        if (!isset($properties['skills'])) {
            $matching_skills_array = [];
        } else {
            $matching_skills_array = array_uintersect($job_skills_array, $properties['skills'], function ($val1, $val2) {
                return strcmp($val1['skill_id'], $val2['skill_id']);
            });
        }
        //mismatch return
        // $mismatching_skills_array = array_udiff($job_skills_array, $properties['skills'], function ($a, $b) {
        //     return ($a['skill_id'] - $b['skill_id']);
        // });

        $mismatching_skills_array = array_udiff($job_skills_array, $matching_skills_array, function ($a, $b) {
            return ($a['skill_id'] - $b['skill_id']);
        });


        $return_array['job_skills'] = $job_skills_array;
        $return_array['job_skills_count'] = count($job_skills_array);
        $return_array['matching_skills_array'] = $matching_skills_array;
        $return_array['matching_skills_count'] = count($matching_skills_array);
        $return_array['mismatching_skills_array'] = $mismatching_skills_array;

        return $return_array;
    }

    /**
     * update changes
     *
     * @return void
     */
    public function update_work_hour_preferences($id = NULL, $id2 = NULL)
    {
        // entry points are: admin_jobs/update_work_hour_preferences($job_id) and persons/update_work_hour_preferences($person_id)
        //model for both
        $controller = $this->uri->segment(1, 0);
        if ($controller == 'admin_jobs') {
            $this->model = $this->admin_jobs_model;
            $redirect_uri = 'admin_jobs/edit_job/' . $id;
        } else {
            $this->model = $this->person_model;
            if ($controller == 'job_user') {
                $redirect_uri = $controller . '/index/' . $id2;
            } else {
                $redirect_uri = 'persons/';
            }
        }
        $data['title'] = 'Update work hour preferences';
        $querydata = [];
        foreach ($this->input->post() as $key => $value) {
            if ($value == 'on') {
                $querydata[$key] =  1;
            }
        }

        //eliminate non-logical cases, set them into order
        //manage nightshift and other shift only
        if (isset($querydata['nightshift']) && !isset($querydata['other_shift']) && !isset($querydata['normal_hours'])) {
            $querydata['nightshift_only'] = 1;
        }
        if (isset($querydata['other_shift']) && !isset($querydata['nightshift']) && !isset($querydata['normal_hours'])) {
            $querydata['other_shift_only'] = 1;
        }


        //set sat_sun_bh_only  if this three are selected and workdays is not
        if (isset($querydata['saturday']) && isset($querydata['sunday']) && isset($querydata['bank_holidays']) && !isset($querydata['workdays'])) {
            unset($querydata['saturday']);
            unset($querydata['sunday']);
            unset($querydata['bank_holidays']);
            $querydata['sat_sun_bh_only'] = 1;
        }

        // validation
        //can't allow to deselect value if no other value is selected per group
        //groups : location, days, hours
        // incoming data:
        // 'workplace' => int 1
        // 'workdays' => int 1
        // 'normal_hours' => int 1
        if (!isset($querydata['workplace']) &&  !isset($querydata['remote'])) {
            $this->session->set_flashdata('work_hour_settings_not_updated', 'You must select at least one option in location preferences');
        } else if (!isset($querydata['workdays']) && !isset($querydata['saturday']) && !isset($querydata['sunday']) && !isset($querydata['bank_holidays']) && !isset($querydata['sat_sun_bh_only'])) {
            $this->session->set_flashdata('work_hour_settings_not_updated', 'You must select at least one option in working day preferences');
        } else if (!isset($querydata['normal_hours']) && !isset($querydata['nightshift']) && !isset($querydata['nightshift_only']) && !isset($querydata['other_shift']) && !isset($querydata['other_shift_only'])) {
            $this->session->set_flashdata('work_hour_settings_not_updated', 'You must select at least one option in working hours preferences');
        } else if (!$this->model->update_work_hour_preferences($id, $querydata)) {
            $this->session->set_flashdata('work_hour_settings_not_updated', 'Work hour settings NOT updated');
        } else {
            $this->session->set_flashdata('work_hour_settings_updated', 'Work hour settings successfully updated');
        }

        redirect($redirect_uri);
    }
}